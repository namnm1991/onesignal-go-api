/*
OneSignal

A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com

API version: 1.0.2
Contact: devrel@onesignal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onesignal

import (
	"encoding/json"
)

// Notification struct for Notification
type Notification struct {
	// The segment names you want to target. Users in these segments will receive a notification. This targeting parameter is only compatible with excluded_segments. Example: [\"Active Users\", \"Inactive Users\"] 
	IncludedSegments []string `json:"included_segments,omitempty"`
	// Segment that will be excluded when sending. Users in these segments will not receive a notification, even if they were included in included_segments. This targeting parameter is only compatible with included_segments. Example: [\"Active Users\", \"Inactive Users\"] 
	ExcludedSegments []string `json:"excluded_segments,omitempty"`
	// relation = \">\" or \"<\" hours_ago = number of hours before or after the users last session. Example: \"1.1\" 
	LastSession *string `json:"last_session,omitempty"`
	// relation = \">\" or \"<\" hours_ago = number of hours before or after the users first session. Example: \"1.1\" 
	FirstSession *string `json:"first_session,omitempty"`
	// relation = \">\", \"<\", \"=\" or \"!=\" value = number sessions. Example: \"1\" 
	SessionCount *string `json:"session_count,omitempty"`
	// relation = \">\", \"<\", \"=\" or \"!=\" value = Time in seconds the user has been in your app. Example: \"3600\" 
	SessionTime *string `json:"session_time,omitempty"`
	// relation = \">\", \"<\", or \"=\" value = Amount in USD a user has spent on IAP (In App Purchases). Example: \"0.99\" 
	AmountSpent *string `json:"amount_spent,omitempty"`
	// relation = \">\", \"<\" or \"=\" key = SKU purchased in your app as an IAP (In App Purchases). Example: \"com.domain.100coinpack\" value = value of SKU to compare to. Example: \"0.99\" 
	BoughtSku *string `json:"bought_sku,omitempty"`
	// relation = \">\", \"<\", \"=\", \"!=\", \"exists\", \"not_exists\", \"time_elapsed_gt\" (paid plan only) or \"time_elapsed_lt\" (paid plan only) See Time Operators key = Tag key to compare. value = Tag value to compare. Not required for \"exists\" or \"not_exists\". Example: See Formatting Filters 
	Tag *string `json:"tag,omitempty"`
	// relation = \"=\" or \"!=\" value = 2 character language code. Example: \"en\". For a list of all language codes see Language & Localization. 
	Language *string `json:"language,omitempty"`
	// relation = \">\", \"<\", \"=\" or \"!=\" value = app version. Example: \"1.0.0\" 
	AppVersion *string `json:"app_version,omitempty"`
	// radius = in meters lat = latitude long = longitude 
	Location *string `json:"location,omitempty"`
	// value = email address Only for sending Push Notifications Use this for targeting push subscribers associated with an email set with all SDK setEmail methods To send emails to specific email addresses use include_email_tokens parameter 
	Email *string `json:"email,omitempty"`
	// relation = \"=\" value = 2-digit Country code Example: \"field\": \"country\", \"relation\": \"=\", \"value\", \"US\" 
	Country *string `json:"country,omitempty"`
	// Specific playerids to send your notification to. _Does not require API Auth Key. Do not combine with other targeting parameters. Not compatible with any other targeting parameters. Example: [\"1dd608f2-c6a1-11e3-851d-000c2940e62c\"] Limit of 2,000 entries per REST API call 
	IncludePlayerIds []string `json:"include_player_ids,omitempty"`
	// Target specific devices by custom user IDs assigned via API. Not compatible with any other targeting parameters Example: [\"custom-id-assigned-by-api\"] REQUIRED: REST API Key Authentication Limit of 2,000 entries per REST API call. Note: If targeting push, email, or sms subscribers with same ids, use with channel_for_external_user_ids to indicate you are sending a push or email or sms. 
	IncludeExternalUserIds []string `json:"include_external_user_ids,omitempty"`
	// Recommended for Sending Emails - Target specific email addresses. If an email does not correspond to an existing user, a new user will be created. Example: nick@catfac.ts Limit of 2,000 entries per REST API call 
	IncludeEmailTokens []string `json:"include_email_tokens,omitempty"`
	// Recommended for Sending SMS - Target specific phone numbers. The phone number should be in the E.164 format. Phone number should be an existing subscriber on OneSignal. Refer our docs to learn how to add phone numbers to OneSignal. Example phone number: +1999999999 Limit of 2,000 entries per REST API call 
	IncludePhoneNumbers []string `json:"include_phone_numbers,omitempty"`
	// Not Recommended: Please consider using include_player_ids or include_external_user_ids instead. Target using iOS device tokens. Warning: Only works with Production tokens. All non-alphanumeric characters must be removed from each token. If a token does not correspond to an existing user, a new user will be created. Example: ce777617da7f548fe7a9ab6febb56cf39fba6d38203... Limit of 2,000 entries per REST API call 
	IncludeIosTokens []string `json:"include_ios_tokens,omitempty"`
	// Not Recommended: Please consider using include_player_ids or include_external_user_ids instead. Target using Windows URIs. If a token does not correspond to an existing user, a new user will be created. Example: http://s.notify.live.net/u/1/bn1/HmQAAACPaLDr-... Limit of 2,000 entries per REST API call 
	IncludeWpWnsUris []string `json:"include_wp_wns_uris,omitempty"`
	// Not Recommended: Please consider using include_player_ids or include_external_user_ids instead. Target using Amazon ADM registration IDs. If a token does not correspond to an existing user, a new user will be created. Example: amzn1.adm-registration.v1.XpvSSUk0Rc3hTVVV... Limit of 2,000 entries per REST API call 
	IncludeAmazonRegIds []string `json:"include_amazon_reg_ids,omitempty"`
	// Not Recommended: Please consider using include_player_ids or include_external_user_ids instead. Target using Chrome App registration IDs. If a token does not correspond to an existing user, a new user will be created. Example: APA91bEeiUeSukAAUdnw3O2RB45FWlSpgJ7Ji_... Limit of 2,000 entries per REST API call 
	IncludeChromeRegIds []string `json:"include_chrome_reg_ids,omitempty"`
	// Not Recommended: Please consider using include_player_ids or include_external_user_ids instead. Target using Chrome Web Push registration IDs. If a token does not correspond to an existing user, a new user will be created. Example: APA91bEeiUeSukAAUdnw3O2RB45FWlSpgJ7Ji_... Limit of 2,000 entries per REST API call 
	IncludeChromeWebRegIds []string `json:"include_chrome_web_reg_ids,omitempty"`
	// Not Recommended: Please consider using include_player_ids or include_external_user_ids instead. Target using Android device registration IDs. If a token does not correspond to an existing user, a new user will be created. Example: APA91bEeiUeSukAAUdnw3O2RB45FWlSpgJ7Ji_... Limit of 2,000 entries per REST API call 
	IncludeAndroidRegIds []string `json:"include_android_reg_ids,omitempty"`
	Id *string `json:"id,omitempty"`
	Value *int32 `json:"value,omitempty"`
	Aggregation *string `json:"aggregation,omitempty"`
	// Indicates whether to send to all devices registered under your app's Apple iOS platform.
	IsIos *bool `json:"isIos,omitempty"`
	// Indicates whether to send to all devices registered under your app's Google Android platform.
	IsAndroid *bool `json:"isAndroid,omitempty"`
	// Indicates whether to send to all devices registered under your app's Huawei Android platform.
	IsHuawei *bool `json:"isHuawei,omitempty"`
	// Indicates whether to send to all subscribed web browser users, including Chrome, Firefox, and Safari. You may use this instead as a combined flag instead of separately enabling isChromeWeb, isFirefox, and isSafari, though the three options are equivalent to this one. 
	IsAnyWeb *bool `json:"isAnyWeb,omitempty"`
	// Indicates whether to send to all Google Chrome, Chrome on Android, and Mozilla Firefox users registered under your Chrome & Firefox web push platform.
	IsChromeWeb *bool `json:"isChromeWeb,omitempty"`
	// Indicates whether to send to all Mozilla Firefox desktop users registered under your Firefox web push platform.
	IsFirefox *bool `json:"isFirefox,omitempty"`
	// Does not support iOS Safari. Indicates whether to send to all Apple's Safari desktop users registered under your Safari web push platform. Read more iOS Safari
	IsSafari *bool `json:"isSafari,omitempty"`
	// Indicates whether to send to all devices registered under your app's Windows platform.
	IsWPWNS *bool `json:"isWP_WNS,omitempty"`
	// Indicates whether to send to all devices registered under your app's Amazon Fire platform.
	IsAdm *bool `json:"isAdm,omitempty"`
	// This flag is not used for web push Please see isChromeWeb for sending to web push users. This flag only applies to Google Chrome Apps & Extensions. Indicates whether to send to all devices registered under your app's Google Chrome Apps & Extension platform. 
	IsChrome *bool `json:"isChrome,omitempty"`
	// Indicates if the message type when targeting with include_external_user_ids for cases where an email, sms, and/or push subscribers have the same external user id. Example: Use the string \"push\" to indicate you are sending a push notification or the string \"email\"for sending emails or \"sms\"for sending SMS. 
	ChannelForExternalUserIds *string `json:"channel_for_external_user_ids,omitempty"`
	// Required: Your OneSignal Application ID, which can be found in Keys & IDs. It is a UUID and looks similar to 8250eaf6-1a58-489e-b136-7c74a864b434. 
	AppId string `json:"app_id"`
	// Correlation and idempotency key. A request received with this parameter will first look for another notification with the same external_id. If one exists, a notification will not be sent, and result of the previous operation will instead be returned. Therefore, if you plan on using this feature, it's important to use a good source of randomness to generate the UUID passed here. This key is only idempotent for 30 days. After 30 days, the notification could be removed from our system and a notification with the same external_id will be sent again.   See Idempotent Notification Requests for more details writeOnly: true 
	ExternalId *string `json:"external_id,omitempty"`
	Contents NullableStringMap `json:"contents,omitempty"`
	Headings NullableStringMap `json:"headings,omitempty"`
	Subtitle NullableStringMap `json:"subtitle,omitempty"`
	// Channel: Push Notifications Platform: Huawei A custom map of data that is passed back to your app. Same as using Additional Data within the dashboard. Can use up to 2048 bytes of data. Example: {\"abc\": 123, \"foo\": \"bar\", \"event_performed\": true, \"amount\": 12.1} 
	Data map[string]interface{} `json:"data,omitempty"`
	// Channel: Push Notifications Platform: Huawei Use \"data\" or \"message\" depending on the type of notification you are sending. More details in Data & Background Notifications. 
	HuaweiMsgType *string `json:"huawei_msg_type,omitempty"`
	// Channel: Push Notifications Platform: All The URL to open in the browser when a user clicks on the notification. Note: iOS needs https or updated NSAppTransportSecurity in plist This field supports inline substitutions. Omit if including web_url or app_url Example: https://onesignal.com 
	Url *string `json:"url,omitempty"`
	// Channel: Push Notifications Platform: All Browsers Same as url but only sent to web push platforms. Including Chrome, Firefox, Safari, Opera, etc. Example: https://onesignal.com 
	WebUrl *string `json:"web_url,omitempty"`
	// Channel: Push Notifications Platform: All Browsers Same as url but only sent to web push platforms. Including iOS, Android, macOS, Windows, ChromeApps, etc. Example: https://onesignal.com 
	AppUrl *string `json:"app_url,omitempty"`
	// Channel: Push Notifications Platform: iOS 10+ Adds media attachments to notifications. Set as JSON object, key as a media id of your choice and the value as a valid local filename or URL. User must press and hold on the notification to view. Do not set mutable_content to download attachments. The OneSignal SDK does this automatically Example: {\"id1\": \"https://domain.com/image.jpg\"} 
	IosAttachments map[string]interface{} `json:"ios_attachments,omitempty"`
	// Channel: Push Notifications Platform: All Use a template you setup on our dashboard. The template_id is the UUID found in the URL when viewing a template on our dashboard. Example: be4a8044-bbd6-11e4-a581-000c2940e62c 
	TemplateId *string `json:"template_id,omitempty"`
	// Channel: Push Notifications Platform: iOS Sending true wakes your app from background to run custom native code (Apple interprets this as content-available=1). Note: Not applicable if the app is in the \"force-quit\" state (i.e app was swiped away). Omit the contents field to prevent displaying a visible notification. 
	ContentAvailable *bool `json:"content_available,omitempty"`
	// Channel: Push Notifications Platform: iOS 10+ Always defaults to true and cannot be turned off. Allows tracking of notification receives and changing of the notification content in your app before it is displayed. Triggers didReceive(_:withContentHandler:) on your UNNotificationServiceExtension. 
	MutableContent *bool `json:"mutable_content,omitempty"`
	// Channel: Push Notifications Platform: iOS 13+ Use to target a specific experience in your App Clip, or to target your notification to a specific window in a multi-scene App. 
	TargetContentIdentifier *string `json:"target_content_identifier,omitempty"`
	// Channel: Push Notifications Platform: Android Picture to display in the expanded view. Can be a drawable resource name or a URL. 
	BigPicture *string `json:"big_picture,omitempty"`
	// Channel: Push Notifications Platform: Huawei Picture to display in the expanded view. Can be a drawable resource name or a URL. 
	HuaweiBigPicture *string `json:"huawei_big_picture,omitempty"`
	// Channel: Push Notifications Platform: Amazon Picture to display in the expanded view. Can be a drawable resource name or a URL. 
	AdmBigPicture *string `json:"adm_big_picture,omitempty"`
	// Channel: Push Notifications Platform: ChromeApp Large picture to display below the notification text. Must be a local URL. 
	ChromeBigPicture *string `json:"chrome_big_picture,omitempty"`
	// Channel: Push Notifications Platform: Chrome 56+ Sets the web push notification's large image to be shown below the notification's title and text. Please see Web Push Notification Icons. 
	ChromeWebImage *string `json:"chrome_web_image,omitempty"`
	// Channel: Push Notifications Platform: iOS 8.0+, Android 4.1+, and derivatives like Amazon Buttons to add to the notification. Icon only works for Android. Buttons show in reverse order of array position i.e. Last item in array shows as first button on device. Example: [{\"id\": \"id2\", \"text\": \"second button\", \"icon\": \"ic_menu_share\"}, {\"id\": \"id1\", \"text\": \"first button\", \"icon\": \"ic_menu_send\"}] 
	Buttons []Button `json:"buttons,omitempty"`
	// Channel: Push Notifications Platform: Chrome 48+ Add action buttons to the notification. The id field is required. Example: [{\"id\": \"like-button\", \"text\": \"Like\", \"icon\": \"http://i.imgur.com/N8SN8ZS.png\", \"url\": \"https://yoursite.com\"}, {\"id\": \"read-more-button\", \"text\": \"Read more\", \"icon\": \"http://i.imgur.com/MIxJp1L.png\", \"url\": \"https://yoursite.com\"}] 
	WebButtons []Button `json:"web_buttons,omitempty"`
	// Channel: Push Notifications Platform: iOS Category APS payload, use with registerUserNotificationSettings:categories in your Objective-C / Swift code. Example: calendar category which contains actions like accept and decline iOS 10+ This will trigger your UNNotificationContentExtension whose ID matches this category. 
	IosCategory *string `json:"ios_category,omitempty"`
	// Channel: Push Notifications Platform: Android The Android Oreo Notification Category to send the notification under. See the Category documentation on creating one and getting it's id. 
	AndroidChannelId *string `json:"android_channel_id,omitempty"`
	// Channel: Push Notifications Platform: Huawei The Android Oreo Notification Category to send the notification under. See the Category documentation on creating one and getting it's id. 
	HuaweiChannelId *string `json:"huawei_channel_id,omitempty"`
	// Channel: Push Notifications Platform: Android Use this if you have client side Android Oreo Channels you have already defined in your app with code. 
	ExistingAndroidChannelId *string `json:"existing_android_channel_id,omitempty"`
	// Channel: Push Notifications Platform: Huawei Use this if you have client side Android Oreo Channels you have already defined in your app with code. 
	HuaweiExistingChannelId *string `json:"huawei_existing_channel_id,omitempty"`
	AndroidBackgroundLayout *NotificationAllOfAndroidBackgroundLayout `json:"android_background_layout,omitempty"`
	// Channel: Push Notifications Platform: Android Icon shown in the status bar and on the top left of the notification. If not set a bell icon will be used or ic_stat_onesignal_default if you have set this resource name. See: How to create small icons 
	SmallIcon *string `json:"small_icon,omitempty"`
	// Channel: Push Notifications Platform: Huawei Icon shown in the status bar and on the top left of the notification. Use an Android resource path (E.g. /drawable/small_icon). Defaults to your app icon if not set. 
	HuaweiSmallIcon *string `json:"huawei_small_icon,omitempty"`
	// Channel: Push Notifications Platform: Android Can be a drawable resource name or a URL. See: How to create large icons 
	LargeIcon *string `json:"large_icon,omitempty"`
	// Channel: Push Notifications Platform: Huawei Can be a drawable resource name or a URL. See: How to create large icons 
	HuaweiLargeIcon *string `json:"huawei_large_icon,omitempty"`
	// Channel: Push Notifications Platform: Amazon If not set a bell icon will be used or ic_stat_onesignal_default if you have set this resource name. See: How to create small icons 
	AdmSmallIcon *string `json:"adm_small_icon,omitempty"`
	// Channel: Push Notifications Platform: Amazon If blank the small_icon is used. Can be a drawable resource name or a URL. See: How to create large icons 
	AdmLargeIcon *string `json:"adm_large_icon,omitempty"`
	// Channel: Push Notifications Platform: Chrome Sets the web push notification's icon. An image URL linking to a valid image. Common image types are supported; GIF will not animate. We recommend 256x256 (at least 80x80) to display well on high DPI devices. Firefox will also use this icon, unless you specify firefox_icon. 
	ChromeWebIcon *string `json:"chrome_web_icon,omitempty"`
	// Channel: Push Notifications Platform: Chrome Sets the web push notification icon for Android devices in the notification shade. Please see Web Push Notification Badge. 
	ChromeWebBadge *string `json:"chrome_web_badge,omitempty"`
	// Channel: Push Notifications Platform: Firefox Not recommended Few people need to set Firefox-specific icons. We recommend setting chrome_web_icon instead, which Firefox will also use. Sets the web push notification's icon for Firefox. An image URL linking to a valid image. Common image types are supported; GIF will not animate. We recommend 256x256 (at least 80x80) to display well on high DPI devices. 
	FirefoxIcon *string `json:"firefox_icon,omitempty"`
	// Channel: Push Notifications Platform: ChromeApp This flag is not used for web push For web push, please see chrome_web_icon instead. The local URL to an icon to use. If blank, the app icon will be used. 
	ChromeIcon *string `json:"chrome_icon,omitempty"`
	// Channel: Push Notifications Platform: iOS Sound file that is included in your app to play instead of the default device notification sound. Pass nil to disable vibration and sound for the notification. Example: \"notification.wav\" 
	IosSound *string `json:"ios_sound,omitempty"`
	// Channel: Push Notifications Platform: Android &#9888;&#65039;Deprecated, this field doesn't work on Android 8 (Oreo) and newer devices! Please use Notification Categories / Channels noted above instead to support ALL versions of Android. Sound file that is included in your app to play instead of the default device notification sound. Pass nil to disable sound for the notification. NOTE: Leave off file extension for Android. Example: \"notification\" 
	AndroidSound *string `json:"android_sound,omitempty"`
	// Channel: Push Notifications Platform: Huawei &#9888;&#65039;Deprecated, this field ONLY works on EMUI 5 (Android 7 based) and older devices. Please also set Notification Categories / Channels noted above to support EMUI 8 (Android 8 based) devices. Sound file that is included in your app to play instead of the default device notification sound. NOTE: Leave off file extension for and include the full path.  Example: \"/res/raw/notification\" 
	HuaweiSound *string `json:"huawei_sound,omitempty"`
	// Channel: Push Notifications Platform: Amazon &#9888;&#65039;Deprecated, this field doesn't work on Android 8 (Oreo) and newer devices! Please use Notification Categories / Channels noted above instead to support ALL versions of Android. Sound file that is included in your app to play instead of the default device notification sound. Pass nil to disable sound for the notification. NOTE: Leave off file extension for Android. Example: \"notification\" 
	AdmSound *string `json:"adm_sound,omitempty"`
	// Channel: Push Notifications Platform: Windows Sound file that is included in your app to play instead of the default device notification sound. Example: \"notification.wav\" 
	WpWnsSound *string `json:"wp_wns_sound,omitempty"`
	// Channel: Push Notifications Platform: Android &#9888;&#65039;Deprecated, this field doesn't work on Android 8 (Oreo) and newer devices! Please use Notification Categories / Channels noted above instead to support ALL versions of Android. Sets the devices LED notification light if the device has one. ARGB Hex format. Example(Blue): \"FF0000FF\" 
	AndroidLedColor *string `json:"android_led_color,omitempty"`
	// Channel: Push Notifications Platform: Huawei &#9888;&#65039;Deprecated, this field ONLY works on EMUI 5 (Android 7 based) and older devices. Please also set Notification Categories / Channels noted above to support EMUI 8 (Android 8 based) devices. Sets the devices LED notification light if the device has one. RGB Hex format. Example(Blue): \"0000FF\" 
	HuaweiLedColor *string `json:"huawei_led_color,omitempty"`
	// Channel: Push Notifications Platform: Android Sets the background color of the notification circle to the left of the notification text. Only applies to apps targeting Android API level 21+ on Android 5.0+ devices. Example(Red): \"FFFF0000\" 
	AndroidAccentColor *string `json:"android_accent_color,omitempty"`
	// Channel: Push Notifications Platform: Huawei Accent Color used on Action Buttons and Group overflow count. Uses RGB Hex value (E.g. #9900FF). Defaults to device's theme color if not set. 
	HuaweiAccentColor *string `json:"huawei_accent_color,omitempty"`
	// Channel: Push Notifications Platform: Android 5.0_ &#9888;&#65039;Deprecated, this field doesn't work on Android 8 (Oreo) and newer devices! Please use Notification Categories / Channels noted above instead to support ALL versions of Android. 1 = Public (default) (Shows the full message on the lock screen unless the user has disabled all notifications from showing on the lock screen. Please consider the user and mark private if the contents are.) 0 = Private (Hides message contents on lock screen if the user set \"Hide sensitive notification content\" in the system settings) -1 = Secret (Notification does not show on the lock screen at all) 
	AndroidVisibility *int32 `json:"android_visibility,omitempty"`
	// Channel: Push Notifications Platform: Huawei &#9888;&#65039;Deprecated, this field ONLY works on EMUI 5 (Android 7 based) and older devices. Please also set Notification Categories / Channels noted above to support EMUI 8 (Android 8 based) devices. 1 = Public (default) (Shows the full message on the lock screen unless the user has disabled all notifications from showing on the lock screen. Please consider the user and mark private if the contents are.) 0 = Private (Hides message contents on lock screen if the user set \"Hide sensitive notification content\" in the system settings) -1 = Secret (Notification does not show on the lock screen at all) 
	HuaweiVisibility *int32 `json:"huawei_visibility,omitempty"`
	// Channel: Push Notifications Platform: iOS Describes whether to set or increase/decrease your app's iOS badge count by the ios_badgeCount specified count. Can specify None, SetTo, or Increase. `None` leaves the count unaffected. `SetTo` directly sets the badge count to the number specified in ios_badgeCount. `Increase` adds the number specified in ios_badgeCount to the total. Use a negative number to decrease the badge count. 
	IosBadgeType *string `json:"ios_badgeType,omitempty"`
	// Channel: Push Notifications Platform: iOS Used with ios_badgeType, describes the value to set or amount to increase/decrease your app's iOS badge count by. You can use a negative number to decrease the badge count when used with an ios_badgeType of Increase. 
	IosBadgeCount *int32 `json:"ios_badgeCount,omitempty"`
	// Channel: Push Notifications Platform: iOS 10+, Android Only one notification with the same id will be shown on the device. Use the same id to update an existing notification instead of showing a new one. Limit of 64 characters. 
	CollapseId *string `json:"collapse_id,omitempty"`
	// Channel: Push Notifications Platform: All Browsers Display multiple notifications at once with different topics. 
	WebPushTopic *string `json:"web_push_topic,omitempty"`
	// Channel: Push Notifications Platform: iOS 10+ iOS can localize push notification messages on the client using special parameters such as loc-key. When using the Create Notification endpoint, you must include these parameters inside of a field called apns_alert. Please see Apple's guide on localizing push notifications to learn more. 
	ApnsAlert map[string]interface{} `json:"apns_alert,omitempty"`
	// Channel: All Schedule notification for future delivery. API defaults to UTC -1100 Examples: All examples are the exact same date & time. \"Thu Sep 24 2015 14:00:00 GMT-0700 (PDT)\" \"September 24th 2015, 2:00:00 pm UTC-07:00\" \"2015-09-24 14:00:00 GMT-0700\" \"Sept 24 2015 14:00:00 GMT-0700\" \"Thu Sep 24 2015 14:00:00 GMT-0700 (Pacific Daylight Time)\" Note: SMS currently only supports send_after parameter. 
	SendAfter *string `json:"send_after,omitempty"`
	// Channel: All Possible values are: timezone (Deliver at a specific time-of-day in each users own timezone) last-active Same as Intelligent Delivery . (Deliver at the same time of day as each user last used your app). If send_after is used, this takes effect after the send_after time has elapsed. 
	DelayedOption *string `json:"delayed_option,omitempty"`
	// Channel: All Use with delayed_option=timezone. Examples: \"9:00AM\" \"21:45\" \"9:45:30\" 
	DeliveryTimeOfDay *string `json:"delivery_time_of_day,omitempty"`
	// Channel: Push Notifications Platform: iOS, Android, Chrome, Firefox, Safari, ChromeWeb Time To Live - In seconds. The notification will be expired if the device does not come back online within this time. The default is 259,200 seconds (3 days). Max value to set is 2419200 seconds (28 days). 
	Ttl *int32 `json:"ttl,omitempty"`
	// Channel: Push Notifications Platform: Android, Chrome, ChromeWeb Delivery priority through the push server (example GCM/FCM). Pass 10 for high priority or any other integer for normal priority. Defaults to normal priority for Android and high for iOS. For Android 6.0+ devices setting priority to high will wake the device out of doze mode. 
	Priority *int32 `json:"priority,omitempty"`
	// Channel: Push Notifications Platform: iOS valid values: voip Set the value to voip for sending VoIP Notifications This field maps to the APNS header apns-push-type. Note: alert and background are automatically set by OneSignal 
	ApnsPushTypeOverride *string `json:"apns_push_type_override,omitempty"`
	// Channel: All Apps with throttling enabled:   - the parameter value will be used to override the default application throttling value set from the dashboard settings.   - parameter value 0 indicates not to apply throttling to the notification.   - if the parameter is not passed then the default app throttling value will be applied to the notification. Apps with throttling disabled:   - this parameter can be used to throttle delivery for the notification even though throttling is not enabled at the application level. Refer to throttling for more details. 
	ThrottleRatePerMinute *string `json:"throttle_rate_per_minute,omitempty"`
	// Channel: Push Notifications Platform: Android Notifications with the same group will be stacked together using Android's Notification Grouping feature. 
	AndroidGroup *string `json:"android_group,omitempty"`
	// Channel: Push Notifications Platform: Android Note: This only works for Android 6 and older. Android 7+ allows full expansion of all message. Summary message to display when 2+ notifications are stacked together. Default is \"# new messages\". Include $[notif_count] in your message and it will be replaced with the current number. Languages - The value of each key is the message that will be sent to users for that language. \"en\" (English) is required. The key of each hash is either a a 2 character language code or one of zh-Hans/zh-Hant for Simplified or Traditional Chinese. Read more: supported languages. Example: {\"en\": \"You have $[notif_count] new messages\"} 
	AndroidGroupMessage *string `json:"android_group_message,omitempty"`
	// Channel: Push Notifications Platform: Amazon Notifications with the same group will be stacked together using Android's Notification Grouping feature. 
	AdmGroup *string `json:"adm_group,omitempty"`
	// Channel: Push Notifications Platform: Amazon Summary message to display when 2+ notifications are stacked together. Default is \"# new messages\". Include $[notif_count] in your message and it will be replaced with the current number. \"en\" (English) is required. The key of each hash is either a a 2 character language code or one of zh-Hans/zh-Hant for Simplified or Traditional Chinese. The value of each key is the message that will be sent to users for that language. Example: {\"en\": \"You have $[notif_count] new messages\"} 
	AdmGroupMessage map[string]interface{} `json:"adm_group_message,omitempty"`
	// Channel: Push Notifications Platform: iOS 12+ This parameter is supported in iOS 12 and above. It allows you to group related notifications together. If two notifications have the same thread-id, they will both be added to the same group. 
	ThreadId *string `json:"thread_id,omitempty"`
	// Channel: Push Notifications Platform: iOS 12+ When using thread_id to create grouped notifications in iOS 12+, you can also control the summary. For example, a grouped notification can say \"12 more notifications from John Doe\". The summary_arg lets you set the name of the person/thing the notifications are coming from, and will show up as \"X more notifications from summary_arg\" 
	SummaryArg *string `json:"summary_arg,omitempty"`
	// Channel: Push Notifications Platform: iOS 12+ When using thread_id, you can also control the count of the number of notifications in the group. For example, if the group already has 12 notifications, and you send a new notification with summary_arg_count = 2, the new total will be 14 and the summary will be \"14 more notifications from summary_arg\" 
	SummaryArgCount *int32 `json:"summary_arg_count,omitempty"`
	// Channel: Email Required.  The subject of the email. 
	EmailSubject *string `json:"email_subject,omitempty"`
	// Channel: Email Required unless template_id is set. HTML suported The body of the email you wish to send. Typically, customers include their own HTML templates here. Must include [unsubscribe_url] in an <a> tag somewhere in the email. Note: any malformed HTML content will be sent to users. Please double-check your HTML is valid. 
	EmailBody *string `json:"email_body,omitempty"`
	// Channel: Email The name the email is from. If not specified, will default to \"from name\" set in the OneSignal Dashboard Email Settings. 
	EmailFromName *string `json:"email_from_name,omitempty"`
	// Channel: Email The email address the email is from. If not specified, will default to \"from email\" set in the OneSignal Dashboard Email Settings. 
	EmailFromAddress *string `json:"email_from_address,omitempty"`
	// Channel: SMS Phone Number used to send SMS. Should be a registered Twilio phone number in E.164 format. 
	SmsFrom *string `json:"sms_from,omitempty"`
	// Channel: SMS URLs for the media files to be attached to the SMS content. Limit: 10 media urls with a total max. size of 5MBs. 
	SmsMediaUrls []string `json:"sms_media_urls,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Notification Notification

// NewNotification instantiates a new Notification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotification(appId string) *Notification {
	this := Notification{}
	var isIos bool = true
	this.IsIos = &isIos
	this.AppId = appId
	return &this
}

// NewNotificationWithDefaults instantiates a new Notification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationWithDefaults() *Notification {
	this := Notification{}
	var isIos bool = true
	this.IsIos = &isIos
	return &this
}

// GetIncludedSegments returns the IncludedSegments field value if set, zero value otherwise.
func (o *Notification) GetIncludedSegments() []string {
	if o == nil || o.IncludedSegments == nil {
		var ret []string
		return ret
	}
	return o.IncludedSegments
}

// GetIncludedSegmentsOk returns a tuple with the IncludedSegments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIncludedSegmentsOk() ([]string, bool) {
	if o == nil || o.IncludedSegments == nil {
		return nil, false
	}
	return o.IncludedSegments, true
}

// HasIncludedSegments returns a boolean if a field has been set.
func (o *Notification) HasIncludedSegments() bool {
	if o != nil && o.IncludedSegments != nil {
		return true
	}

	return false
}

// SetIncludedSegments gets a reference to the given []string and assigns it to the IncludedSegments field.
func (o *Notification) SetIncludedSegments(v []string) {
	o.IncludedSegments = v
}

// GetExcludedSegments returns the ExcludedSegments field value if set, zero value otherwise.
func (o *Notification) GetExcludedSegments() []string {
	if o == nil || o.ExcludedSegments == nil {
		var ret []string
		return ret
	}
	return o.ExcludedSegments
}

// GetExcludedSegmentsOk returns a tuple with the ExcludedSegments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetExcludedSegmentsOk() ([]string, bool) {
	if o == nil || o.ExcludedSegments == nil {
		return nil, false
	}
	return o.ExcludedSegments, true
}

// HasExcludedSegments returns a boolean if a field has been set.
func (o *Notification) HasExcludedSegments() bool {
	if o != nil && o.ExcludedSegments != nil {
		return true
	}

	return false
}

// SetExcludedSegments gets a reference to the given []string and assigns it to the ExcludedSegments field.
func (o *Notification) SetExcludedSegments(v []string) {
	o.ExcludedSegments = v
}

// GetLastSession returns the LastSession field value if set, zero value otherwise.
func (o *Notification) GetLastSession() string {
	if o == nil || o.LastSession == nil {
		var ret string
		return ret
	}
	return *o.LastSession
}

// GetLastSessionOk returns a tuple with the LastSession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetLastSessionOk() (*string, bool) {
	if o == nil || o.LastSession == nil {
		return nil, false
	}
	return o.LastSession, true
}

// HasLastSession returns a boolean if a field has been set.
func (o *Notification) HasLastSession() bool {
	if o != nil && o.LastSession != nil {
		return true
	}

	return false
}

// SetLastSession gets a reference to the given string and assigns it to the LastSession field.
func (o *Notification) SetLastSession(v string) {
	o.LastSession = &v
}

// GetFirstSession returns the FirstSession field value if set, zero value otherwise.
func (o *Notification) GetFirstSession() string {
	if o == nil || o.FirstSession == nil {
		var ret string
		return ret
	}
	return *o.FirstSession
}

// GetFirstSessionOk returns a tuple with the FirstSession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetFirstSessionOk() (*string, bool) {
	if o == nil || o.FirstSession == nil {
		return nil, false
	}
	return o.FirstSession, true
}

// HasFirstSession returns a boolean if a field has been set.
func (o *Notification) HasFirstSession() bool {
	if o != nil && o.FirstSession != nil {
		return true
	}

	return false
}

// SetFirstSession gets a reference to the given string and assigns it to the FirstSession field.
func (o *Notification) SetFirstSession(v string) {
	o.FirstSession = &v
}

// GetSessionCount returns the SessionCount field value if set, zero value otherwise.
func (o *Notification) GetSessionCount() string {
	if o == nil || o.SessionCount == nil {
		var ret string
		return ret
	}
	return *o.SessionCount
}

// GetSessionCountOk returns a tuple with the SessionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetSessionCountOk() (*string, bool) {
	if o == nil || o.SessionCount == nil {
		return nil, false
	}
	return o.SessionCount, true
}

// HasSessionCount returns a boolean if a field has been set.
func (o *Notification) HasSessionCount() bool {
	if o != nil && o.SessionCount != nil {
		return true
	}

	return false
}

// SetSessionCount gets a reference to the given string and assigns it to the SessionCount field.
func (o *Notification) SetSessionCount(v string) {
	o.SessionCount = &v
}

// GetSessionTime returns the SessionTime field value if set, zero value otherwise.
func (o *Notification) GetSessionTime() string {
	if o == nil || o.SessionTime == nil {
		var ret string
		return ret
	}
	return *o.SessionTime
}

// GetSessionTimeOk returns a tuple with the SessionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetSessionTimeOk() (*string, bool) {
	if o == nil || o.SessionTime == nil {
		return nil, false
	}
	return o.SessionTime, true
}

// HasSessionTime returns a boolean if a field has been set.
func (o *Notification) HasSessionTime() bool {
	if o != nil && o.SessionTime != nil {
		return true
	}

	return false
}

// SetSessionTime gets a reference to the given string and assigns it to the SessionTime field.
func (o *Notification) SetSessionTime(v string) {
	o.SessionTime = &v
}

// GetAmountSpent returns the AmountSpent field value if set, zero value otherwise.
func (o *Notification) GetAmountSpent() string {
	if o == nil || o.AmountSpent == nil {
		var ret string
		return ret
	}
	return *o.AmountSpent
}

// GetAmountSpentOk returns a tuple with the AmountSpent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetAmountSpentOk() (*string, bool) {
	if o == nil || o.AmountSpent == nil {
		return nil, false
	}
	return o.AmountSpent, true
}

// HasAmountSpent returns a boolean if a field has been set.
func (o *Notification) HasAmountSpent() bool {
	if o != nil && o.AmountSpent != nil {
		return true
	}

	return false
}

// SetAmountSpent gets a reference to the given string and assigns it to the AmountSpent field.
func (o *Notification) SetAmountSpent(v string) {
	o.AmountSpent = &v
}

// GetBoughtSku returns the BoughtSku field value if set, zero value otherwise.
func (o *Notification) GetBoughtSku() string {
	if o == nil || o.BoughtSku == nil {
		var ret string
		return ret
	}
	return *o.BoughtSku
}

// GetBoughtSkuOk returns a tuple with the BoughtSku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetBoughtSkuOk() (*string, bool) {
	if o == nil || o.BoughtSku == nil {
		return nil, false
	}
	return o.BoughtSku, true
}

// HasBoughtSku returns a boolean if a field has been set.
func (o *Notification) HasBoughtSku() bool {
	if o != nil && o.BoughtSku != nil {
		return true
	}

	return false
}

// SetBoughtSku gets a reference to the given string and assigns it to the BoughtSku field.
func (o *Notification) SetBoughtSku(v string) {
	o.BoughtSku = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *Notification) GetTag() string {
	if o == nil || o.Tag == nil {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetTagOk() (*string, bool) {
	if o == nil || o.Tag == nil {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *Notification) HasTag() bool {
	if o != nil && o.Tag != nil {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *Notification) SetTag(v string) {
	o.Tag = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *Notification) GetLanguage() string {
	if o == nil || o.Language == nil {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetLanguageOk() (*string, bool) {
	if o == nil || o.Language == nil {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *Notification) HasLanguage() bool {
	if o != nil && o.Language != nil {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *Notification) SetLanguage(v string) {
	o.Language = &v
}

// GetAppVersion returns the AppVersion field value if set, zero value otherwise.
func (o *Notification) GetAppVersion() string {
	if o == nil || o.AppVersion == nil {
		var ret string
		return ret
	}
	return *o.AppVersion
}

// GetAppVersionOk returns a tuple with the AppVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetAppVersionOk() (*string, bool) {
	if o == nil || o.AppVersion == nil {
		return nil, false
	}
	return o.AppVersion, true
}

// HasAppVersion returns a boolean if a field has been set.
func (o *Notification) HasAppVersion() bool {
	if o != nil && o.AppVersion != nil {
		return true
	}

	return false
}

// SetAppVersion gets a reference to the given string and assigns it to the AppVersion field.
func (o *Notification) SetAppVersion(v string) {
	o.AppVersion = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Notification) GetLocation() string {
	if o == nil || o.Location == nil {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetLocationOk() (*string, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *Notification) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *Notification) SetLocation(v string) {
	o.Location = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *Notification) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *Notification) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *Notification) SetEmail(v string) {
	o.Email = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *Notification) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *Notification) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *Notification) SetCountry(v string) {
	o.Country = &v
}

// GetIncludePlayerIds returns the IncludePlayerIds field value if set, zero value otherwise.
func (o *Notification) GetIncludePlayerIds() []string {
	if o == nil || o.IncludePlayerIds == nil {
		var ret []string
		return ret
	}
	return o.IncludePlayerIds
}

// GetIncludePlayerIdsOk returns a tuple with the IncludePlayerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIncludePlayerIdsOk() ([]string, bool) {
	if o == nil || o.IncludePlayerIds == nil {
		return nil, false
	}
	return o.IncludePlayerIds, true
}

// HasIncludePlayerIds returns a boolean if a field has been set.
func (o *Notification) HasIncludePlayerIds() bool {
	if o != nil && o.IncludePlayerIds != nil {
		return true
	}

	return false
}

// SetIncludePlayerIds gets a reference to the given []string and assigns it to the IncludePlayerIds field.
func (o *Notification) SetIncludePlayerIds(v []string) {
	o.IncludePlayerIds = v
}

// GetIncludeExternalUserIds returns the IncludeExternalUserIds field value if set, zero value otherwise.
func (o *Notification) GetIncludeExternalUserIds() []string {
	if o == nil || o.IncludeExternalUserIds == nil {
		var ret []string
		return ret
	}
	return o.IncludeExternalUserIds
}

// GetIncludeExternalUserIdsOk returns a tuple with the IncludeExternalUserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIncludeExternalUserIdsOk() ([]string, bool) {
	if o == nil || o.IncludeExternalUserIds == nil {
		return nil, false
	}
	return o.IncludeExternalUserIds, true
}

// HasIncludeExternalUserIds returns a boolean if a field has been set.
func (o *Notification) HasIncludeExternalUserIds() bool {
	if o != nil && o.IncludeExternalUserIds != nil {
		return true
	}

	return false
}

// SetIncludeExternalUserIds gets a reference to the given []string and assigns it to the IncludeExternalUserIds field.
func (o *Notification) SetIncludeExternalUserIds(v []string) {
	o.IncludeExternalUserIds = v
}

// GetIncludeEmailTokens returns the IncludeEmailTokens field value if set, zero value otherwise.
func (o *Notification) GetIncludeEmailTokens() []string {
	if o == nil || o.IncludeEmailTokens == nil {
		var ret []string
		return ret
	}
	return o.IncludeEmailTokens
}

// GetIncludeEmailTokensOk returns a tuple with the IncludeEmailTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIncludeEmailTokensOk() ([]string, bool) {
	if o == nil || o.IncludeEmailTokens == nil {
		return nil, false
	}
	return o.IncludeEmailTokens, true
}

// HasIncludeEmailTokens returns a boolean if a field has been set.
func (o *Notification) HasIncludeEmailTokens() bool {
	if o != nil && o.IncludeEmailTokens != nil {
		return true
	}

	return false
}

// SetIncludeEmailTokens gets a reference to the given []string and assigns it to the IncludeEmailTokens field.
func (o *Notification) SetIncludeEmailTokens(v []string) {
	o.IncludeEmailTokens = v
}

// GetIncludePhoneNumbers returns the IncludePhoneNumbers field value if set, zero value otherwise.
func (o *Notification) GetIncludePhoneNumbers() []string {
	if o == nil || o.IncludePhoneNumbers == nil {
		var ret []string
		return ret
	}
	return o.IncludePhoneNumbers
}

// GetIncludePhoneNumbersOk returns a tuple with the IncludePhoneNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIncludePhoneNumbersOk() ([]string, bool) {
	if o == nil || o.IncludePhoneNumbers == nil {
		return nil, false
	}
	return o.IncludePhoneNumbers, true
}

// HasIncludePhoneNumbers returns a boolean if a field has been set.
func (o *Notification) HasIncludePhoneNumbers() bool {
	if o != nil && o.IncludePhoneNumbers != nil {
		return true
	}

	return false
}

// SetIncludePhoneNumbers gets a reference to the given []string and assigns it to the IncludePhoneNumbers field.
func (o *Notification) SetIncludePhoneNumbers(v []string) {
	o.IncludePhoneNumbers = v
}

// GetIncludeIosTokens returns the IncludeIosTokens field value if set, zero value otherwise.
func (o *Notification) GetIncludeIosTokens() []string {
	if o == nil || o.IncludeIosTokens == nil {
		var ret []string
		return ret
	}
	return o.IncludeIosTokens
}

// GetIncludeIosTokensOk returns a tuple with the IncludeIosTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIncludeIosTokensOk() ([]string, bool) {
	if o == nil || o.IncludeIosTokens == nil {
		return nil, false
	}
	return o.IncludeIosTokens, true
}

// HasIncludeIosTokens returns a boolean if a field has been set.
func (o *Notification) HasIncludeIosTokens() bool {
	if o != nil && o.IncludeIosTokens != nil {
		return true
	}

	return false
}

// SetIncludeIosTokens gets a reference to the given []string and assigns it to the IncludeIosTokens field.
func (o *Notification) SetIncludeIosTokens(v []string) {
	o.IncludeIosTokens = v
}

// GetIncludeWpWnsUris returns the IncludeWpWnsUris field value if set, zero value otherwise.
func (o *Notification) GetIncludeWpWnsUris() []string {
	if o == nil || o.IncludeWpWnsUris == nil {
		var ret []string
		return ret
	}
	return o.IncludeWpWnsUris
}

// GetIncludeWpWnsUrisOk returns a tuple with the IncludeWpWnsUris field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIncludeWpWnsUrisOk() ([]string, bool) {
	if o == nil || o.IncludeWpWnsUris == nil {
		return nil, false
	}
	return o.IncludeWpWnsUris, true
}

// HasIncludeWpWnsUris returns a boolean if a field has been set.
func (o *Notification) HasIncludeWpWnsUris() bool {
	if o != nil && o.IncludeWpWnsUris != nil {
		return true
	}

	return false
}

// SetIncludeWpWnsUris gets a reference to the given []string and assigns it to the IncludeWpWnsUris field.
func (o *Notification) SetIncludeWpWnsUris(v []string) {
	o.IncludeWpWnsUris = v
}

// GetIncludeAmazonRegIds returns the IncludeAmazonRegIds field value if set, zero value otherwise.
func (o *Notification) GetIncludeAmazonRegIds() []string {
	if o == nil || o.IncludeAmazonRegIds == nil {
		var ret []string
		return ret
	}
	return o.IncludeAmazonRegIds
}

// GetIncludeAmazonRegIdsOk returns a tuple with the IncludeAmazonRegIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIncludeAmazonRegIdsOk() ([]string, bool) {
	if o == nil || o.IncludeAmazonRegIds == nil {
		return nil, false
	}
	return o.IncludeAmazonRegIds, true
}

// HasIncludeAmazonRegIds returns a boolean if a field has been set.
func (o *Notification) HasIncludeAmazonRegIds() bool {
	if o != nil && o.IncludeAmazonRegIds != nil {
		return true
	}

	return false
}

// SetIncludeAmazonRegIds gets a reference to the given []string and assigns it to the IncludeAmazonRegIds field.
func (o *Notification) SetIncludeAmazonRegIds(v []string) {
	o.IncludeAmazonRegIds = v
}

// GetIncludeChromeRegIds returns the IncludeChromeRegIds field value if set, zero value otherwise.
func (o *Notification) GetIncludeChromeRegIds() []string {
	if o == nil || o.IncludeChromeRegIds == nil {
		var ret []string
		return ret
	}
	return o.IncludeChromeRegIds
}

// GetIncludeChromeRegIdsOk returns a tuple with the IncludeChromeRegIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIncludeChromeRegIdsOk() ([]string, bool) {
	if o == nil || o.IncludeChromeRegIds == nil {
		return nil, false
	}
	return o.IncludeChromeRegIds, true
}

// HasIncludeChromeRegIds returns a boolean if a field has been set.
func (o *Notification) HasIncludeChromeRegIds() bool {
	if o != nil && o.IncludeChromeRegIds != nil {
		return true
	}

	return false
}

// SetIncludeChromeRegIds gets a reference to the given []string and assigns it to the IncludeChromeRegIds field.
func (o *Notification) SetIncludeChromeRegIds(v []string) {
	o.IncludeChromeRegIds = v
}

// GetIncludeChromeWebRegIds returns the IncludeChromeWebRegIds field value if set, zero value otherwise.
func (o *Notification) GetIncludeChromeWebRegIds() []string {
	if o == nil || o.IncludeChromeWebRegIds == nil {
		var ret []string
		return ret
	}
	return o.IncludeChromeWebRegIds
}

// GetIncludeChromeWebRegIdsOk returns a tuple with the IncludeChromeWebRegIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIncludeChromeWebRegIdsOk() ([]string, bool) {
	if o == nil || o.IncludeChromeWebRegIds == nil {
		return nil, false
	}
	return o.IncludeChromeWebRegIds, true
}

// HasIncludeChromeWebRegIds returns a boolean if a field has been set.
func (o *Notification) HasIncludeChromeWebRegIds() bool {
	if o != nil && o.IncludeChromeWebRegIds != nil {
		return true
	}

	return false
}

// SetIncludeChromeWebRegIds gets a reference to the given []string and assigns it to the IncludeChromeWebRegIds field.
func (o *Notification) SetIncludeChromeWebRegIds(v []string) {
	o.IncludeChromeWebRegIds = v
}

// GetIncludeAndroidRegIds returns the IncludeAndroidRegIds field value if set, zero value otherwise.
func (o *Notification) GetIncludeAndroidRegIds() []string {
	if o == nil || o.IncludeAndroidRegIds == nil {
		var ret []string
		return ret
	}
	return o.IncludeAndroidRegIds
}

// GetIncludeAndroidRegIdsOk returns a tuple with the IncludeAndroidRegIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIncludeAndroidRegIdsOk() ([]string, bool) {
	if o == nil || o.IncludeAndroidRegIds == nil {
		return nil, false
	}
	return o.IncludeAndroidRegIds, true
}

// HasIncludeAndroidRegIds returns a boolean if a field has been set.
func (o *Notification) HasIncludeAndroidRegIds() bool {
	if o != nil && o.IncludeAndroidRegIds != nil {
		return true
	}

	return false
}

// SetIncludeAndroidRegIds gets a reference to the given []string and assigns it to the IncludeAndroidRegIds field.
func (o *Notification) SetIncludeAndroidRegIds(v []string) {
	o.IncludeAndroidRegIds = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Notification) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Notification) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Notification) SetId(v string) {
	o.Id = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Notification) GetValue() int32 {
	if o == nil || o.Value == nil {
		var ret int32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetValueOk() (*int32, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Notification) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given int32 and assigns it to the Value field.
func (o *Notification) SetValue(v int32) {
	o.Value = &v
}

// GetAggregation returns the Aggregation field value if set, zero value otherwise.
func (o *Notification) GetAggregation() string {
	if o == nil || o.Aggregation == nil {
		var ret string
		return ret
	}
	return *o.Aggregation
}

// GetAggregationOk returns a tuple with the Aggregation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetAggregationOk() (*string, bool) {
	if o == nil || o.Aggregation == nil {
		return nil, false
	}
	return o.Aggregation, true
}

// HasAggregation returns a boolean if a field has been set.
func (o *Notification) HasAggregation() bool {
	if o != nil && o.Aggregation != nil {
		return true
	}

	return false
}

// SetAggregation gets a reference to the given string and assigns it to the Aggregation field.
func (o *Notification) SetAggregation(v string) {
	o.Aggregation = &v
}

// GetIsIos returns the IsIos field value if set, zero value otherwise.
func (o *Notification) GetIsIos() bool {
	if o == nil || o.IsIos == nil {
		var ret bool
		return ret
	}
	return *o.IsIos
}

// GetIsIosOk returns a tuple with the IsIos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIsIosOk() (*bool, bool) {
	if o == nil || o.IsIos == nil {
		return nil, false
	}
	return o.IsIos, true
}

// HasIsIos returns a boolean if a field has been set.
func (o *Notification) HasIsIos() bool {
	if o != nil && o.IsIos != nil {
		return true
	}

	return false
}

// SetIsIos gets a reference to the given bool and assigns it to the IsIos field.
func (o *Notification) SetIsIos(v bool) {
	o.IsIos = &v
}

// GetIsAndroid returns the IsAndroid field value if set, zero value otherwise.
func (o *Notification) GetIsAndroid() bool {
	if o == nil || o.IsAndroid == nil {
		var ret bool
		return ret
	}
	return *o.IsAndroid
}

// GetIsAndroidOk returns a tuple with the IsAndroid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIsAndroidOk() (*bool, bool) {
	if o == nil || o.IsAndroid == nil {
		return nil, false
	}
	return o.IsAndroid, true
}

// HasIsAndroid returns a boolean if a field has been set.
func (o *Notification) HasIsAndroid() bool {
	if o != nil && o.IsAndroid != nil {
		return true
	}

	return false
}

// SetIsAndroid gets a reference to the given bool and assigns it to the IsAndroid field.
func (o *Notification) SetIsAndroid(v bool) {
	o.IsAndroid = &v
}

// GetIsHuawei returns the IsHuawei field value if set, zero value otherwise.
func (o *Notification) GetIsHuawei() bool {
	if o == nil || o.IsHuawei == nil {
		var ret bool
		return ret
	}
	return *o.IsHuawei
}

// GetIsHuaweiOk returns a tuple with the IsHuawei field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIsHuaweiOk() (*bool, bool) {
	if o == nil || o.IsHuawei == nil {
		return nil, false
	}
	return o.IsHuawei, true
}

// HasIsHuawei returns a boolean if a field has been set.
func (o *Notification) HasIsHuawei() bool {
	if o != nil && o.IsHuawei != nil {
		return true
	}

	return false
}

// SetIsHuawei gets a reference to the given bool and assigns it to the IsHuawei field.
func (o *Notification) SetIsHuawei(v bool) {
	o.IsHuawei = &v
}

// GetIsAnyWeb returns the IsAnyWeb field value if set, zero value otherwise.
func (o *Notification) GetIsAnyWeb() bool {
	if o == nil || o.IsAnyWeb == nil {
		var ret bool
		return ret
	}
	return *o.IsAnyWeb
}

// GetIsAnyWebOk returns a tuple with the IsAnyWeb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIsAnyWebOk() (*bool, bool) {
	if o == nil || o.IsAnyWeb == nil {
		return nil, false
	}
	return o.IsAnyWeb, true
}

// HasIsAnyWeb returns a boolean if a field has been set.
func (o *Notification) HasIsAnyWeb() bool {
	if o != nil && o.IsAnyWeb != nil {
		return true
	}

	return false
}

// SetIsAnyWeb gets a reference to the given bool and assigns it to the IsAnyWeb field.
func (o *Notification) SetIsAnyWeb(v bool) {
	o.IsAnyWeb = &v
}

// GetIsChromeWeb returns the IsChromeWeb field value if set, zero value otherwise.
func (o *Notification) GetIsChromeWeb() bool {
	if o == nil || o.IsChromeWeb == nil {
		var ret bool
		return ret
	}
	return *o.IsChromeWeb
}

// GetIsChromeWebOk returns a tuple with the IsChromeWeb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIsChromeWebOk() (*bool, bool) {
	if o == nil || o.IsChromeWeb == nil {
		return nil, false
	}
	return o.IsChromeWeb, true
}

// HasIsChromeWeb returns a boolean if a field has been set.
func (o *Notification) HasIsChromeWeb() bool {
	if o != nil && o.IsChromeWeb != nil {
		return true
	}

	return false
}

// SetIsChromeWeb gets a reference to the given bool and assigns it to the IsChromeWeb field.
func (o *Notification) SetIsChromeWeb(v bool) {
	o.IsChromeWeb = &v
}

// GetIsFirefox returns the IsFirefox field value if set, zero value otherwise.
func (o *Notification) GetIsFirefox() bool {
	if o == nil || o.IsFirefox == nil {
		var ret bool
		return ret
	}
	return *o.IsFirefox
}

// GetIsFirefoxOk returns a tuple with the IsFirefox field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIsFirefoxOk() (*bool, bool) {
	if o == nil || o.IsFirefox == nil {
		return nil, false
	}
	return o.IsFirefox, true
}

// HasIsFirefox returns a boolean if a field has been set.
func (o *Notification) HasIsFirefox() bool {
	if o != nil && o.IsFirefox != nil {
		return true
	}

	return false
}

// SetIsFirefox gets a reference to the given bool and assigns it to the IsFirefox field.
func (o *Notification) SetIsFirefox(v bool) {
	o.IsFirefox = &v
}

// GetIsSafari returns the IsSafari field value if set, zero value otherwise.
func (o *Notification) GetIsSafari() bool {
	if o == nil || o.IsSafari == nil {
		var ret bool
		return ret
	}
	return *o.IsSafari
}

// GetIsSafariOk returns a tuple with the IsSafari field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIsSafariOk() (*bool, bool) {
	if o == nil || o.IsSafari == nil {
		return nil, false
	}
	return o.IsSafari, true
}

// HasIsSafari returns a boolean if a field has been set.
func (o *Notification) HasIsSafari() bool {
	if o != nil && o.IsSafari != nil {
		return true
	}

	return false
}

// SetIsSafari gets a reference to the given bool and assigns it to the IsSafari field.
func (o *Notification) SetIsSafari(v bool) {
	o.IsSafari = &v
}

// GetIsWPWNS returns the IsWPWNS field value if set, zero value otherwise.
func (o *Notification) GetIsWPWNS() bool {
	if o == nil || o.IsWPWNS == nil {
		var ret bool
		return ret
	}
	return *o.IsWPWNS
}

// GetIsWPWNSOk returns a tuple with the IsWPWNS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIsWPWNSOk() (*bool, bool) {
	if o == nil || o.IsWPWNS == nil {
		return nil, false
	}
	return o.IsWPWNS, true
}

// HasIsWPWNS returns a boolean if a field has been set.
func (o *Notification) HasIsWPWNS() bool {
	if o != nil && o.IsWPWNS != nil {
		return true
	}

	return false
}

// SetIsWPWNS gets a reference to the given bool and assigns it to the IsWPWNS field.
func (o *Notification) SetIsWPWNS(v bool) {
	o.IsWPWNS = &v
}

// GetIsAdm returns the IsAdm field value if set, zero value otherwise.
func (o *Notification) GetIsAdm() bool {
	if o == nil || o.IsAdm == nil {
		var ret bool
		return ret
	}
	return *o.IsAdm
}

// GetIsAdmOk returns a tuple with the IsAdm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIsAdmOk() (*bool, bool) {
	if o == nil || o.IsAdm == nil {
		return nil, false
	}
	return o.IsAdm, true
}

// HasIsAdm returns a boolean if a field has been set.
func (o *Notification) HasIsAdm() bool {
	if o != nil && o.IsAdm != nil {
		return true
	}

	return false
}

// SetIsAdm gets a reference to the given bool and assigns it to the IsAdm field.
func (o *Notification) SetIsAdm(v bool) {
	o.IsAdm = &v
}

// GetIsChrome returns the IsChrome field value if set, zero value otherwise.
func (o *Notification) GetIsChrome() bool {
	if o == nil || o.IsChrome == nil {
		var ret bool
		return ret
	}
	return *o.IsChrome
}

// GetIsChromeOk returns a tuple with the IsChrome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIsChromeOk() (*bool, bool) {
	if o == nil || o.IsChrome == nil {
		return nil, false
	}
	return o.IsChrome, true
}

// HasIsChrome returns a boolean if a field has been set.
func (o *Notification) HasIsChrome() bool {
	if o != nil && o.IsChrome != nil {
		return true
	}

	return false
}

// SetIsChrome gets a reference to the given bool and assigns it to the IsChrome field.
func (o *Notification) SetIsChrome(v bool) {
	o.IsChrome = &v
}

// GetChannelForExternalUserIds returns the ChannelForExternalUserIds field value if set, zero value otherwise.
func (o *Notification) GetChannelForExternalUserIds() string {
	if o == nil || o.ChannelForExternalUserIds == nil {
		var ret string
		return ret
	}
	return *o.ChannelForExternalUserIds
}

// GetChannelForExternalUserIdsOk returns a tuple with the ChannelForExternalUserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetChannelForExternalUserIdsOk() (*string, bool) {
	if o == nil || o.ChannelForExternalUserIds == nil {
		return nil, false
	}
	return o.ChannelForExternalUserIds, true
}

// HasChannelForExternalUserIds returns a boolean if a field has been set.
func (o *Notification) HasChannelForExternalUserIds() bool {
	if o != nil && o.ChannelForExternalUserIds != nil {
		return true
	}

	return false
}

// SetChannelForExternalUserIds gets a reference to the given string and assigns it to the ChannelForExternalUserIds field.
func (o *Notification) SetChannelForExternalUserIds(v string) {
	o.ChannelForExternalUserIds = &v
}

// GetAppId returns the AppId field value
func (o *Notification) GetAppId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value
// and a boolean to check if the value has been set.
func (o *Notification) GetAppIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppId, true
}

// SetAppId sets field value
func (o *Notification) SetAppId(v string) {
	o.AppId = v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *Notification) GetExternalId() string {
	if o == nil || o.ExternalId == nil {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetExternalIdOk() (*string, bool) {
	if o == nil || o.ExternalId == nil {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *Notification) HasExternalId() bool {
	if o != nil && o.ExternalId != nil {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *Notification) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetContents returns the Contents field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetContents() StringMap {
	if o == nil || o.Contents.Get() == nil {
		var ret StringMap
		return ret
	}
	return *o.Contents.Get()
}

// GetContentsOk returns a tuple with the Contents field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetContentsOk() (*StringMap, bool) {
	if o == nil {
		return nil, false
	}
	return o.Contents.Get(), o.Contents.IsSet()
}

// HasContents returns a boolean if a field has been set.
func (o *Notification) HasContents() bool {
	if o != nil && o.Contents.IsSet() {
		return true
	}

	return false
}

// SetContents gets a reference to the given NullableStringMap and assigns it to the Contents field.
func (o *Notification) SetContents(v StringMap) {
	o.Contents.Set(&v)
}
// SetContentsNil sets the value for Contents to be an explicit nil
func (o *Notification) SetContentsNil() {
	o.Contents.Set(nil)
}

// UnsetContents ensures that no value is present for Contents, not even an explicit nil
func (o *Notification) UnsetContents() {
	o.Contents.Unset()
}

// GetHeadings returns the Headings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetHeadings() StringMap {
	if o == nil || o.Headings.Get() == nil {
		var ret StringMap
		return ret
	}
	return *o.Headings.Get()
}

// GetHeadingsOk returns a tuple with the Headings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetHeadingsOk() (*StringMap, bool) {
	if o == nil {
		return nil, false
	}
	return o.Headings.Get(), o.Headings.IsSet()
}

// HasHeadings returns a boolean if a field has been set.
func (o *Notification) HasHeadings() bool {
	if o != nil && o.Headings.IsSet() {
		return true
	}

	return false
}

// SetHeadings gets a reference to the given NullableStringMap and assigns it to the Headings field.
func (o *Notification) SetHeadings(v StringMap) {
	o.Headings.Set(&v)
}
// SetHeadingsNil sets the value for Headings to be an explicit nil
func (o *Notification) SetHeadingsNil() {
	o.Headings.Set(nil)
}

// UnsetHeadings ensures that no value is present for Headings, not even an explicit nil
func (o *Notification) UnsetHeadings() {
	o.Headings.Unset()
}

// GetSubtitle returns the Subtitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetSubtitle() StringMap {
	if o == nil || o.Subtitle.Get() == nil {
		var ret StringMap
		return ret
	}
	return *o.Subtitle.Get()
}

// GetSubtitleOk returns a tuple with the Subtitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetSubtitleOk() (*StringMap, bool) {
	if o == nil {
		return nil, false
	}
	return o.Subtitle.Get(), o.Subtitle.IsSet()
}

// HasSubtitle returns a boolean if a field has been set.
func (o *Notification) HasSubtitle() bool {
	if o != nil && o.Subtitle.IsSet() {
		return true
	}

	return false
}

// SetSubtitle gets a reference to the given NullableStringMap and assigns it to the Subtitle field.
func (o *Notification) SetSubtitle(v StringMap) {
	o.Subtitle.Set(&v)
}
// SetSubtitleNil sets the value for Subtitle to be an explicit nil
func (o *Notification) SetSubtitleNil() {
	o.Subtitle.Set(nil)
}

// UnsetSubtitle ensures that no value is present for Subtitle, not even an explicit nil
func (o *Notification) UnsetSubtitle() {
	o.Subtitle.Unset()
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *Notification) GetData() map[string]interface{} {
	if o == nil || o.Data == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *Notification) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *Notification) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetHuaweiMsgType returns the HuaweiMsgType field value if set, zero value otherwise.
func (o *Notification) GetHuaweiMsgType() string {
	if o == nil || o.HuaweiMsgType == nil {
		var ret string
		return ret
	}
	return *o.HuaweiMsgType
}

// GetHuaweiMsgTypeOk returns a tuple with the HuaweiMsgType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetHuaweiMsgTypeOk() (*string, bool) {
	if o == nil || o.HuaweiMsgType == nil {
		return nil, false
	}
	return o.HuaweiMsgType, true
}

// HasHuaweiMsgType returns a boolean if a field has been set.
func (o *Notification) HasHuaweiMsgType() bool {
	if o != nil && o.HuaweiMsgType != nil {
		return true
	}

	return false
}

// SetHuaweiMsgType gets a reference to the given string and assigns it to the HuaweiMsgType field.
func (o *Notification) SetHuaweiMsgType(v string) {
	o.HuaweiMsgType = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Notification) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Notification) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Notification) SetUrl(v string) {
	o.Url = &v
}

// GetWebUrl returns the WebUrl field value if set, zero value otherwise.
func (o *Notification) GetWebUrl() string {
	if o == nil || o.WebUrl == nil {
		var ret string
		return ret
	}
	return *o.WebUrl
}

// GetWebUrlOk returns a tuple with the WebUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetWebUrlOk() (*string, bool) {
	if o == nil || o.WebUrl == nil {
		return nil, false
	}
	return o.WebUrl, true
}

// HasWebUrl returns a boolean if a field has been set.
func (o *Notification) HasWebUrl() bool {
	if o != nil && o.WebUrl != nil {
		return true
	}

	return false
}

// SetWebUrl gets a reference to the given string and assigns it to the WebUrl field.
func (o *Notification) SetWebUrl(v string) {
	o.WebUrl = &v
}

// GetAppUrl returns the AppUrl field value if set, zero value otherwise.
func (o *Notification) GetAppUrl() string {
	if o == nil || o.AppUrl == nil {
		var ret string
		return ret
	}
	return *o.AppUrl
}

// GetAppUrlOk returns a tuple with the AppUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetAppUrlOk() (*string, bool) {
	if o == nil || o.AppUrl == nil {
		return nil, false
	}
	return o.AppUrl, true
}

// HasAppUrl returns a boolean if a field has been set.
func (o *Notification) HasAppUrl() bool {
	if o != nil && o.AppUrl != nil {
		return true
	}

	return false
}

// SetAppUrl gets a reference to the given string and assigns it to the AppUrl field.
func (o *Notification) SetAppUrl(v string) {
	o.AppUrl = &v
}

// GetIosAttachments returns the IosAttachments field value if set, zero value otherwise.
func (o *Notification) GetIosAttachments() map[string]interface{} {
	if o == nil || o.IosAttachments == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.IosAttachments
}

// GetIosAttachmentsOk returns a tuple with the IosAttachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIosAttachmentsOk() (map[string]interface{}, bool) {
	if o == nil || o.IosAttachments == nil {
		return nil, false
	}
	return o.IosAttachments, true
}

// HasIosAttachments returns a boolean if a field has been set.
func (o *Notification) HasIosAttachments() bool {
	if o != nil && o.IosAttachments != nil {
		return true
	}

	return false
}

// SetIosAttachments gets a reference to the given map[string]interface{} and assigns it to the IosAttachments field.
func (o *Notification) SetIosAttachments(v map[string]interface{}) {
	o.IosAttachments = v
}

// GetTemplateId returns the TemplateId field value if set, zero value otherwise.
func (o *Notification) GetTemplateId() string {
	if o == nil || o.TemplateId == nil {
		var ret string
		return ret
	}
	return *o.TemplateId
}

// GetTemplateIdOk returns a tuple with the TemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetTemplateIdOk() (*string, bool) {
	if o == nil || o.TemplateId == nil {
		return nil, false
	}
	return o.TemplateId, true
}

// HasTemplateId returns a boolean if a field has been set.
func (o *Notification) HasTemplateId() bool {
	if o != nil && o.TemplateId != nil {
		return true
	}

	return false
}

// SetTemplateId gets a reference to the given string and assigns it to the TemplateId field.
func (o *Notification) SetTemplateId(v string) {
	o.TemplateId = &v
}

// GetContentAvailable returns the ContentAvailable field value if set, zero value otherwise.
func (o *Notification) GetContentAvailable() bool {
	if o == nil || o.ContentAvailable == nil {
		var ret bool
		return ret
	}
	return *o.ContentAvailable
}

// GetContentAvailableOk returns a tuple with the ContentAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetContentAvailableOk() (*bool, bool) {
	if o == nil || o.ContentAvailable == nil {
		return nil, false
	}
	return o.ContentAvailable, true
}

// HasContentAvailable returns a boolean if a field has been set.
func (o *Notification) HasContentAvailable() bool {
	if o != nil && o.ContentAvailable != nil {
		return true
	}

	return false
}

// SetContentAvailable gets a reference to the given bool and assigns it to the ContentAvailable field.
func (o *Notification) SetContentAvailable(v bool) {
	o.ContentAvailable = &v
}

// GetMutableContent returns the MutableContent field value if set, zero value otherwise.
func (o *Notification) GetMutableContent() bool {
	if o == nil || o.MutableContent == nil {
		var ret bool
		return ret
	}
	return *o.MutableContent
}

// GetMutableContentOk returns a tuple with the MutableContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetMutableContentOk() (*bool, bool) {
	if o == nil || o.MutableContent == nil {
		return nil, false
	}
	return o.MutableContent, true
}

// HasMutableContent returns a boolean if a field has been set.
func (o *Notification) HasMutableContent() bool {
	if o != nil && o.MutableContent != nil {
		return true
	}

	return false
}

// SetMutableContent gets a reference to the given bool and assigns it to the MutableContent field.
func (o *Notification) SetMutableContent(v bool) {
	o.MutableContent = &v
}

// GetTargetContentIdentifier returns the TargetContentIdentifier field value if set, zero value otherwise.
func (o *Notification) GetTargetContentIdentifier() string {
	if o == nil || o.TargetContentIdentifier == nil {
		var ret string
		return ret
	}
	return *o.TargetContentIdentifier
}

// GetTargetContentIdentifierOk returns a tuple with the TargetContentIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetTargetContentIdentifierOk() (*string, bool) {
	if o == nil || o.TargetContentIdentifier == nil {
		return nil, false
	}
	return o.TargetContentIdentifier, true
}

// HasTargetContentIdentifier returns a boolean if a field has been set.
func (o *Notification) HasTargetContentIdentifier() bool {
	if o != nil && o.TargetContentIdentifier != nil {
		return true
	}

	return false
}

// SetTargetContentIdentifier gets a reference to the given string and assigns it to the TargetContentIdentifier field.
func (o *Notification) SetTargetContentIdentifier(v string) {
	o.TargetContentIdentifier = &v
}

// GetBigPicture returns the BigPicture field value if set, zero value otherwise.
func (o *Notification) GetBigPicture() string {
	if o == nil || o.BigPicture == nil {
		var ret string
		return ret
	}
	return *o.BigPicture
}

// GetBigPictureOk returns a tuple with the BigPicture field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetBigPictureOk() (*string, bool) {
	if o == nil || o.BigPicture == nil {
		return nil, false
	}
	return o.BigPicture, true
}

// HasBigPicture returns a boolean if a field has been set.
func (o *Notification) HasBigPicture() bool {
	if o != nil && o.BigPicture != nil {
		return true
	}

	return false
}

// SetBigPicture gets a reference to the given string and assigns it to the BigPicture field.
func (o *Notification) SetBigPicture(v string) {
	o.BigPicture = &v
}

// GetHuaweiBigPicture returns the HuaweiBigPicture field value if set, zero value otherwise.
func (o *Notification) GetHuaweiBigPicture() string {
	if o == nil || o.HuaweiBigPicture == nil {
		var ret string
		return ret
	}
	return *o.HuaweiBigPicture
}

// GetHuaweiBigPictureOk returns a tuple with the HuaweiBigPicture field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetHuaweiBigPictureOk() (*string, bool) {
	if o == nil || o.HuaweiBigPicture == nil {
		return nil, false
	}
	return o.HuaweiBigPicture, true
}

// HasHuaweiBigPicture returns a boolean if a field has been set.
func (o *Notification) HasHuaweiBigPicture() bool {
	if o != nil && o.HuaweiBigPicture != nil {
		return true
	}

	return false
}

// SetHuaweiBigPicture gets a reference to the given string and assigns it to the HuaweiBigPicture field.
func (o *Notification) SetHuaweiBigPicture(v string) {
	o.HuaweiBigPicture = &v
}

// GetAdmBigPicture returns the AdmBigPicture field value if set, zero value otherwise.
func (o *Notification) GetAdmBigPicture() string {
	if o == nil || o.AdmBigPicture == nil {
		var ret string
		return ret
	}
	return *o.AdmBigPicture
}

// GetAdmBigPictureOk returns a tuple with the AdmBigPicture field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetAdmBigPictureOk() (*string, bool) {
	if o == nil || o.AdmBigPicture == nil {
		return nil, false
	}
	return o.AdmBigPicture, true
}

// HasAdmBigPicture returns a boolean if a field has been set.
func (o *Notification) HasAdmBigPicture() bool {
	if o != nil && o.AdmBigPicture != nil {
		return true
	}

	return false
}

// SetAdmBigPicture gets a reference to the given string and assigns it to the AdmBigPicture field.
func (o *Notification) SetAdmBigPicture(v string) {
	o.AdmBigPicture = &v
}

// GetChromeBigPicture returns the ChromeBigPicture field value if set, zero value otherwise.
func (o *Notification) GetChromeBigPicture() string {
	if o == nil || o.ChromeBigPicture == nil {
		var ret string
		return ret
	}
	return *o.ChromeBigPicture
}

// GetChromeBigPictureOk returns a tuple with the ChromeBigPicture field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetChromeBigPictureOk() (*string, bool) {
	if o == nil || o.ChromeBigPicture == nil {
		return nil, false
	}
	return o.ChromeBigPicture, true
}

// HasChromeBigPicture returns a boolean if a field has been set.
func (o *Notification) HasChromeBigPicture() bool {
	if o != nil && o.ChromeBigPicture != nil {
		return true
	}

	return false
}

// SetChromeBigPicture gets a reference to the given string and assigns it to the ChromeBigPicture field.
func (o *Notification) SetChromeBigPicture(v string) {
	o.ChromeBigPicture = &v
}

// GetChromeWebImage returns the ChromeWebImage field value if set, zero value otherwise.
func (o *Notification) GetChromeWebImage() string {
	if o == nil || o.ChromeWebImage == nil {
		var ret string
		return ret
	}
	return *o.ChromeWebImage
}

// GetChromeWebImageOk returns a tuple with the ChromeWebImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetChromeWebImageOk() (*string, bool) {
	if o == nil || o.ChromeWebImage == nil {
		return nil, false
	}
	return o.ChromeWebImage, true
}

// HasChromeWebImage returns a boolean if a field has been set.
func (o *Notification) HasChromeWebImage() bool {
	if o != nil && o.ChromeWebImage != nil {
		return true
	}

	return false
}

// SetChromeWebImage gets a reference to the given string and assigns it to the ChromeWebImage field.
func (o *Notification) SetChromeWebImage(v string) {
	o.ChromeWebImage = &v
}

// GetButtons returns the Buttons field value if set, zero value otherwise.
func (o *Notification) GetButtons() []Button {
	if o == nil || o.Buttons == nil {
		var ret []Button
		return ret
	}
	return o.Buttons
}

// GetButtonsOk returns a tuple with the Buttons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetButtonsOk() ([]Button, bool) {
	if o == nil || o.Buttons == nil {
		return nil, false
	}
	return o.Buttons, true
}

// HasButtons returns a boolean if a field has been set.
func (o *Notification) HasButtons() bool {
	if o != nil && o.Buttons != nil {
		return true
	}

	return false
}

// SetButtons gets a reference to the given []Button and assigns it to the Buttons field.
func (o *Notification) SetButtons(v []Button) {
	o.Buttons = v
}

// GetWebButtons returns the WebButtons field value if set, zero value otherwise.
func (o *Notification) GetWebButtons() []Button {
	if o == nil || o.WebButtons == nil {
		var ret []Button
		return ret
	}
	return o.WebButtons
}

// GetWebButtonsOk returns a tuple with the WebButtons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetWebButtonsOk() ([]Button, bool) {
	if o == nil || o.WebButtons == nil {
		return nil, false
	}
	return o.WebButtons, true
}

// HasWebButtons returns a boolean if a field has been set.
func (o *Notification) HasWebButtons() bool {
	if o != nil && o.WebButtons != nil {
		return true
	}

	return false
}

// SetWebButtons gets a reference to the given []Button and assigns it to the WebButtons field.
func (o *Notification) SetWebButtons(v []Button) {
	o.WebButtons = v
}

// GetIosCategory returns the IosCategory field value if set, zero value otherwise.
func (o *Notification) GetIosCategory() string {
	if o == nil || o.IosCategory == nil {
		var ret string
		return ret
	}
	return *o.IosCategory
}

// GetIosCategoryOk returns a tuple with the IosCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIosCategoryOk() (*string, bool) {
	if o == nil || o.IosCategory == nil {
		return nil, false
	}
	return o.IosCategory, true
}

// HasIosCategory returns a boolean if a field has been set.
func (o *Notification) HasIosCategory() bool {
	if o != nil && o.IosCategory != nil {
		return true
	}

	return false
}

// SetIosCategory gets a reference to the given string and assigns it to the IosCategory field.
func (o *Notification) SetIosCategory(v string) {
	o.IosCategory = &v
}

// GetAndroidChannelId returns the AndroidChannelId field value if set, zero value otherwise.
func (o *Notification) GetAndroidChannelId() string {
	if o == nil || o.AndroidChannelId == nil {
		var ret string
		return ret
	}
	return *o.AndroidChannelId
}

// GetAndroidChannelIdOk returns a tuple with the AndroidChannelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetAndroidChannelIdOk() (*string, bool) {
	if o == nil || o.AndroidChannelId == nil {
		return nil, false
	}
	return o.AndroidChannelId, true
}

// HasAndroidChannelId returns a boolean if a field has been set.
func (o *Notification) HasAndroidChannelId() bool {
	if o != nil && o.AndroidChannelId != nil {
		return true
	}

	return false
}

// SetAndroidChannelId gets a reference to the given string and assigns it to the AndroidChannelId field.
func (o *Notification) SetAndroidChannelId(v string) {
	o.AndroidChannelId = &v
}

// GetHuaweiChannelId returns the HuaweiChannelId field value if set, zero value otherwise.
func (o *Notification) GetHuaweiChannelId() string {
	if o == nil || o.HuaweiChannelId == nil {
		var ret string
		return ret
	}
	return *o.HuaweiChannelId
}

// GetHuaweiChannelIdOk returns a tuple with the HuaweiChannelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetHuaweiChannelIdOk() (*string, bool) {
	if o == nil || o.HuaweiChannelId == nil {
		return nil, false
	}
	return o.HuaweiChannelId, true
}

// HasHuaweiChannelId returns a boolean if a field has been set.
func (o *Notification) HasHuaweiChannelId() bool {
	if o != nil && o.HuaweiChannelId != nil {
		return true
	}

	return false
}

// SetHuaweiChannelId gets a reference to the given string and assigns it to the HuaweiChannelId field.
func (o *Notification) SetHuaweiChannelId(v string) {
	o.HuaweiChannelId = &v
}

// GetExistingAndroidChannelId returns the ExistingAndroidChannelId field value if set, zero value otherwise.
func (o *Notification) GetExistingAndroidChannelId() string {
	if o == nil || o.ExistingAndroidChannelId == nil {
		var ret string
		return ret
	}
	return *o.ExistingAndroidChannelId
}

// GetExistingAndroidChannelIdOk returns a tuple with the ExistingAndroidChannelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetExistingAndroidChannelIdOk() (*string, bool) {
	if o == nil || o.ExistingAndroidChannelId == nil {
		return nil, false
	}
	return o.ExistingAndroidChannelId, true
}

// HasExistingAndroidChannelId returns a boolean if a field has been set.
func (o *Notification) HasExistingAndroidChannelId() bool {
	if o != nil && o.ExistingAndroidChannelId != nil {
		return true
	}

	return false
}

// SetExistingAndroidChannelId gets a reference to the given string and assigns it to the ExistingAndroidChannelId field.
func (o *Notification) SetExistingAndroidChannelId(v string) {
	o.ExistingAndroidChannelId = &v
}

// GetHuaweiExistingChannelId returns the HuaweiExistingChannelId field value if set, zero value otherwise.
func (o *Notification) GetHuaweiExistingChannelId() string {
	if o == nil || o.HuaweiExistingChannelId == nil {
		var ret string
		return ret
	}
	return *o.HuaweiExistingChannelId
}

// GetHuaweiExistingChannelIdOk returns a tuple with the HuaweiExistingChannelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetHuaweiExistingChannelIdOk() (*string, bool) {
	if o == nil || o.HuaweiExistingChannelId == nil {
		return nil, false
	}
	return o.HuaweiExistingChannelId, true
}

// HasHuaweiExistingChannelId returns a boolean if a field has been set.
func (o *Notification) HasHuaweiExistingChannelId() bool {
	if o != nil && o.HuaweiExistingChannelId != nil {
		return true
	}

	return false
}

// SetHuaweiExistingChannelId gets a reference to the given string and assigns it to the HuaweiExistingChannelId field.
func (o *Notification) SetHuaweiExistingChannelId(v string) {
	o.HuaweiExistingChannelId = &v
}

// GetAndroidBackgroundLayout returns the AndroidBackgroundLayout field value if set, zero value otherwise.
func (o *Notification) GetAndroidBackgroundLayout() NotificationAllOfAndroidBackgroundLayout {
	if o == nil || o.AndroidBackgroundLayout == nil {
		var ret NotificationAllOfAndroidBackgroundLayout
		return ret
	}
	return *o.AndroidBackgroundLayout
}

// GetAndroidBackgroundLayoutOk returns a tuple with the AndroidBackgroundLayout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetAndroidBackgroundLayoutOk() (*NotificationAllOfAndroidBackgroundLayout, bool) {
	if o == nil || o.AndroidBackgroundLayout == nil {
		return nil, false
	}
	return o.AndroidBackgroundLayout, true
}

// HasAndroidBackgroundLayout returns a boolean if a field has been set.
func (o *Notification) HasAndroidBackgroundLayout() bool {
	if o != nil && o.AndroidBackgroundLayout != nil {
		return true
	}

	return false
}

// SetAndroidBackgroundLayout gets a reference to the given NotificationAllOfAndroidBackgroundLayout and assigns it to the AndroidBackgroundLayout field.
func (o *Notification) SetAndroidBackgroundLayout(v NotificationAllOfAndroidBackgroundLayout) {
	o.AndroidBackgroundLayout = &v
}

// GetSmallIcon returns the SmallIcon field value if set, zero value otherwise.
func (o *Notification) GetSmallIcon() string {
	if o == nil || o.SmallIcon == nil {
		var ret string
		return ret
	}
	return *o.SmallIcon
}

// GetSmallIconOk returns a tuple with the SmallIcon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetSmallIconOk() (*string, bool) {
	if o == nil || o.SmallIcon == nil {
		return nil, false
	}
	return o.SmallIcon, true
}

// HasSmallIcon returns a boolean if a field has been set.
func (o *Notification) HasSmallIcon() bool {
	if o != nil && o.SmallIcon != nil {
		return true
	}

	return false
}

// SetSmallIcon gets a reference to the given string and assigns it to the SmallIcon field.
func (o *Notification) SetSmallIcon(v string) {
	o.SmallIcon = &v
}

// GetHuaweiSmallIcon returns the HuaweiSmallIcon field value if set, zero value otherwise.
func (o *Notification) GetHuaweiSmallIcon() string {
	if o == nil || o.HuaweiSmallIcon == nil {
		var ret string
		return ret
	}
	return *o.HuaweiSmallIcon
}

// GetHuaweiSmallIconOk returns a tuple with the HuaweiSmallIcon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetHuaweiSmallIconOk() (*string, bool) {
	if o == nil || o.HuaweiSmallIcon == nil {
		return nil, false
	}
	return o.HuaweiSmallIcon, true
}

// HasHuaweiSmallIcon returns a boolean if a field has been set.
func (o *Notification) HasHuaweiSmallIcon() bool {
	if o != nil && o.HuaweiSmallIcon != nil {
		return true
	}

	return false
}

// SetHuaweiSmallIcon gets a reference to the given string and assigns it to the HuaweiSmallIcon field.
func (o *Notification) SetHuaweiSmallIcon(v string) {
	o.HuaweiSmallIcon = &v
}

// GetLargeIcon returns the LargeIcon field value if set, zero value otherwise.
func (o *Notification) GetLargeIcon() string {
	if o == nil || o.LargeIcon == nil {
		var ret string
		return ret
	}
	return *o.LargeIcon
}

// GetLargeIconOk returns a tuple with the LargeIcon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetLargeIconOk() (*string, bool) {
	if o == nil || o.LargeIcon == nil {
		return nil, false
	}
	return o.LargeIcon, true
}

// HasLargeIcon returns a boolean if a field has been set.
func (o *Notification) HasLargeIcon() bool {
	if o != nil && o.LargeIcon != nil {
		return true
	}

	return false
}

// SetLargeIcon gets a reference to the given string and assigns it to the LargeIcon field.
func (o *Notification) SetLargeIcon(v string) {
	o.LargeIcon = &v
}

// GetHuaweiLargeIcon returns the HuaweiLargeIcon field value if set, zero value otherwise.
func (o *Notification) GetHuaweiLargeIcon() string {
	if o == nil || o.HuaweiLargeIcon == nil {
		var ret string
		return ret
	}
	return *o.HuaweiLargeIcon
}

// GetHuaweiLargeIconOk returns a tuple with the HuaweiLargeIcon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetHuaweiLargeIconOk() (*string, bool) {
	if o == nil || o.HuaweiLargeIcon == nil {
		return nil, false
	}
	return o.HuaweiLargeIcon, true
}

// HasHuaweiLargeIcon returns a boolean if a field has been set.
func (o *Notification) HasHuaweiLargeIcon() bool {
	if o != nil && o.HuaweiLargeIcon != nil {
		return true
	}

	return false
}

// SetHuaweiLargeIcon gets a reference to the given string and assigns it to the HuaweiLargeIcon field.
func (o *Notification) SetHuaweiLargeIcon(v string) {
	o.HuaweiLargeIcon = &v
}

// GetAdmSmallIcon returns the AdmSmallIcon field value if set, zero value otherwise.
func (o *Notification) GetAdmSmallIcon() string {
	if o == nil || o.AdmSmallIcon == nil {
		var ret string
		return ret
	}
	return *o.AdmSmallIcon
}

// GetAdmSmallIconOk returns a tuple with the AdmSmallIcon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetAdmSmallIconOk() (*string, bool) {
	if o == nil || o.AdmSmallIcon == nil {
		return nil, false
	}
	return o.AdmSmallIcon, true
}

// HasAdmSmallIcon returns a boolean if a field has been set.
func (o *Notification) HasAdmSmallIcon() bool {
	if o != nil && o.AdmSmallIcon != nil {
		return true
	}

	return false
}

// SetAdmSmallIcon gets a reference to the given string and assigns it to the AdmSmallIcon field.
func (o *Notification) SetAdmSmallIcon(v string) {
	o.AdmSmallIcon = &v
}

// GetAdmLargeIcon returns the AdmLargeIcon field value if set, zero value otherwise.
func (o *Notification) GetAdmLargeIcon() string {
	if o == nil || o.AdmLargeIcon == nil {
		var ret string
		return ret
	}
	return *o.AdmLargeIcon
}

// GetAdmLargeIconOk returns a tuple with the AdmLargeIcon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetAdmLargeIconOk() (*string, bool) {
	if o == nil || o.AdmLargeIcon == nil {
		return nil, false
	}
	return o.AdmLargeIcon, true
}

// HasAdmLargeIcon returns a boolean if a field has been set.
func (o *Notification) HasAdmLargeIcon() bool {
	if o != nil && o.AdmLargeIcon != nil {
		return true
	}

	return false
}

// SetAdmLargeIcon gets a reference to the given string and assigns it to the AdmLargeIcon field.
func (o *Notification) SetAdmLargeIcon(v string) {
	o.AdmLargeIcon = &v
}

// GetChromeWebIcon returns the ChromeWebIcon field value if set, zero value otherwise.
func (o *Notification) GetChromeWebIcon() string {
	if o == nil || o.ChromeWebIcon == nil {
		var ret string
		return ret
	}
	return *o.ChromeWebIcon
}

// GetChromeWebIconOk returns a tuple with the ChromeWebIcon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetChromeWebIconOk() (*string, bool) {
	if o == nil || o.ChromeWebIcon == nil {
		return nil, false
	}
	return o.ChromeWebIcon, true
}

// HasChromeWebIcon returns a boolean if a field has been set.
func (o *Notification) HasChromeWebIcon() bool {
	if o != nil && o.ChromeWebIcon != nil {
		return true
	}

	return false
}

// SetChromeWebIcon gets a reference to the given string and assigns it to the ChromeWebIcon field.
func (o *Notification) SetChromeWebIcon(v string) {
	o.ChromeWebIcon = &v
}

// GetChromeWebBadge returns the ChromeWebBadge field value if set, zero value otherwise.
func (o *Notification) GetChromeWebBadge() string {
	if o == nil || o.ChromeWebBadge == nil {
		var ret string
		return ret
	}
	return *o.ChromeWebBadge
}

// GetChromeWebBadgeOk returns a tuple with the ChromeWebBadge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetChromeWebBadgeOk() (*string, bool) {
	if o == nil || o.ChromeWebBadge == nil {
		return nil, false
	}
	return o.ChromeWebBadge, true
}

// HasChromeWebBadge returns a boolean if a field has been set.
func (o *Notification) HasChromeWebBadge() bool {
	if o != nil && o.ChromeWebBadge != nil {
		return true
	}

	return false
}

// SetChromeWebBadge gets a reference to the given string and assigns it to the ChromeWebBadge field.
func (o *Notification) SetChromeWebBadge(v string) {
	o.ChromeWebBadge = &v
}

// GetFirefoxIcon returns the FirefoxIcon field value if set, zero value otherwise.
func (o *Notification) GetFirefoxIcon() string {
	if o == nil || o.FirefoxIcon == nil {
		var ret string
		return ret
	}
	return *o.FirefoxIcon
}

// GetFirefoxIconOk returns a tuple with the FirefoxIcon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetFirefoxIconOk() (*string, bool) {
	if o == nil || o.FirefoxIcon == nil {
		return nil, false
	}
	return o.FirefoxIcon, true
}

// HasFirefoxIcon returns a boolean if a field has been set.
func (o *Notification) HasFirefoxIcon() bool {
	if o != nil && o.FirefoxIcon != nil {
		return true
	}

	return false
}

// SetFirefoxIcon gets a reference to the given string and assigns it to the FirefoxIcon field.
func (o *Notification) SetFirefoxIcon(v string) {
	o.FirefoxIcon = &v
}

// GetChromeIcon returns the ChromeIcon field value if set, zero value otherwise.
func (o *Notification) GetChromeIcon() string {
	if o == nil || o.ChromeIcon == nil {
		var ret string
		return ret
	}
	return *o.ChromeIcon
}

// GetChromeIconOk returns a tuple with the ChromeIcon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetChromeIconOk() (*string, bool) {
	if o == nil || o.ChromeIcon == nil {
		return nil, false
	}
	return o.ChromeIcon, true
}

// HasChromeIcon returns a boolean if a field has been set.
func (o *Notification) HasChromeIcon() bool {
	if o != nil && o.ChromeIcon != nil {
		return true
	}

	return false
}

// SetChromeIcon gets a reference to the given string and assigns it to the ChromeIcon field.
func (o *Notification) SetChromeIcon(v string) {
	o.ChromeIcon = &v
}

// GetIosSound returns the IosSound field value if set, zero value otherwise.
func (o *Notification) GetIosSound() string {
	if o == nil || o.IosSound == nil {
		var ret string
		return ret
	}
	return *o.IosSound
}

// GetIosSoundOk returns a tuple with the IosSound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIosSoundOk() (*string, bool) {
	if o == nil || o.IosSound == nil {
		return nil, false
	}
	return o.IosSound, true
}

// HasIosSound returns a boolean if a field has been set.
func (o *Notification) HasIosSound() bool {
	if o != nil && o.IosSound != nil {
		return true
	}

	return false
}

// SetIosSound gets a reference to the given string and assigns it to the IosSound field.
func (o *Notification) SetIosSound(v string) {
	o.IosSound = &v
}

// GetAndroidSound returns the AndroidSound field value if set, zero value otherwise.
func (o *Notification) GetAndroidSound() string {
	if o == nil || o.AndroidSound == nil {
		var ret string
		return ret
	}
	return *o.AndroidSound
}

// GetAndroidSoundOk returns a tuple with the AndroidSound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetAndroidSoundOk() (*string, bool) {
	if o == nil || o.AndroidSound == nil {
		return nil, false
	}
	return o.AndroidSound, true
}

// HasAndroidSound returns a boolean if a field has been set.
func (o *Notification) HasAndroidSound() bool {
	if o != nil && o.AndroidSound != nil {
		return true
	}

	return false
}

// SetAndroidSound gets a reference to the given string and assigns it to the AndroidSound field.
func (o *Notification) SetAndroidSound(v string) {
	o.AndroidSound = &v
}

// GetHuaweiSound returns the HuaweiSound field value if set, zero value otherwise.
func (o *Notification) GetHuaweiSound() string {
	if o == nil || o.HuaweiSound == nil {
		var ret string
		return ret
	}
	return *o.HuaweiSound
}

// GetHuaweiSoundOk returns a tuple with the HuaweiSound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetHuaweiSoundOk() (*string, bool) {
	if o == nil || o.HuaweiSound == nil {
		return nil, false
	}
	return o.HuaweiSound, true
}

// HasHuaweiSound returns a boolean if a field has been set.
func (o *Notification) HasHuaweiSound() bool {
	if o != nil && o.HuaweiSound != nil {
		return true
	}

	return false
}

// SetHuaweiSound gets a reference to the given string and assigns it to the HuaweiSound field.
func (o *Notification) SetHuaweiSound(v string) {
	o.HuaweiSound = &v
}

// GetAdmSound returns the AdmSound field value if set, zero value otherwise.
func (o *Notification) GetAdmSound() string {
	if o == nil || o.AdmSound == nil {
		var ret string
		return ret
	}
	return *o.AdmSound
}

// GetAdmSoundOk returns a tuple with the AdmSound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetAdmSoundOk() (*string, bool) {
	if o == nil || o.AdmSound == nil {
		return nil, false
	}
	return o.AdmSound, true
}

// HasAdmSound returns a boolean if a field has been set.
func (o *Notification) HasAdmSound() bool {
	if o != nil && o.AdmSound != nil {
		return true
	}

	return false
}

// SetAdmSound gets a reference to the given string and assigns it to the AdmSound field.
func (o *Notification) SetAdmSound(v string) {
	o.AdmSound = &v
}

// GetWpWnsSound returns the WpWnsSound field value if set, zero value otherwise.
func (o *Notification) GetWpWnsSound() string {
	if o == nil || o.WpWnsSound == nil {
		var ret string
		return ret
	}
	return *o.WpWnsSound
}

// GetWpWnsSoundOk returns a tuple with the WpWnsSound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetWpWnsSoundOk() (*string, bool) {
	if o == nil || o.WpWnsSound == nil {
		return nil, false
	}
	return o.WpWnsSound, true
}

// HasWpWnsSound returns a boolean if a field has been set.
func (o *Notification) HasWpWnsSound() bool {
	if o != nil && o.WpWnsSound != nil {
		return true
	}

	return false
}

// SetWpWnsSound gets a reference to the given string and assigns it to the WpWnsSound field.
func (o *Notification) SetWpWnsSound(v string) {
	o.WpWnsSound = &v
}

// GetAndroidLedColor returns the AndroidLedColor field value if set, zero value otherwise.
func (o *Notification) GetAndroidLedColor() string {
	if o == nil || o.AndroidLedColor == nil {
		var ret string
		return ret
	}
	return *o.AndroidLedColor
}

// GetAndroidLedColorOk returns a tuple with the AndroidLedColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetAndroidLedColorOk() (*string, bool) {
	if o == nil || o.AndroidLedColor == nil {
		return nil, false
	}
	return o.AndroidLedColor, true
}

// HasAndroidLedColor returns a boolean if a field has been set.
func (o *Notification) HasAndroidLedColor() bool {
	if o != nil && o.AndroidLedColor != nil {
		return true
	}

	return false
}

// SetAndroidLedColor gets a reference to the given string and assigns it to the AndroidLedColor field.
func (o *Notification) SetAndroidLedColor(v string) {
	o.AndroidLedColor = &v
}

// GetHuaweiLedColor returns the HuaweiLedColor field value if set, zero value otherwise.
func (o *Notification) GetHuaweiLedColor() string {
	if o == nil || o.HuaweiLedColor == nil {
		var ret string
		return ret
	}
	return *o.HuaweiLedColor
}

// GetHuaweiLedColorOk returns a tuple with the HuaweiLedColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetHuaweiLedColorOk() (*string, bool) {
	if o == nil || o.HuaweiLedColor == nil {
		return nil, false
	}
	return o.HuaweiLedColor, true
}

// HasHuaweiLedColor returns a boolean if a field has been set.
func (o *Notification) HasHuaweiLedColor() bool {
	if o != nil && o.HuaweiLedColor != nil {
		return true
	}

	return false
}

// SetHuaweiLedColor gets a reference to the given string and assigns it to the HuaweiLedColor field.
func (o *Notification) SetHuaweiLedColor(v string) {
	o.HuaweiLedColor = &v
}

// GetAndroidAccentColor returns the AndroidAccentColor field value if set, zero value otherwise.
func (o *Notification) GetAndroidAccentColor() string {
	if o == nil || o.AndroidAccentColor == nil {
		var ret string
		return ret
	}
	return *o.AndroidAccentColor
}

// GetAndroidAccentColorOk returns a tuple with the AndroidAccentColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetAndroidAccentColorOk() (*string, bool) {
	if o == nil || o.AndroidAccentColor == nil {
		return nil, false
	}
	return o.AndroidAccentColor, true
}

// HasAndroidAccentColor returns a boolean if a field has been set.
func (o *Notification) HasAndroidAccentColor() bool {
	if o != nil && o.AndroidAccentColor != nil {
		return true
	}

	return false
}

// SetAndroidAccentColor gets a reference to the given string and assigns it to the AndroidAccentColor field.
func (o *Notification) SetAndroidAccentColor(v string) {
	o.AndroidAccentColor = &v
}

// GetHuaweiAccentColor returns the HuaweiAccentColor field value if set, zero value otherwise.
func (o *Notification) GetHuaweiAccentColor() string {
	if o == nil || o.HuaweiAccentColor == nil {
		var ret string
		return ret
	}
	return *o.HuaweiAccentColor
}

// GetHuaweiAccentColorOk returns a tuple with the HuaweiAccentColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetHuaweiAccentColorOk() (*string, bool) {
	if o == nil || o.HuaweiAccentColor == nil {
		return nil, false
	}
	return o.HuaweiAccentColor, true
}

// HasHuaweiAccentColor returns a boolean if a field has been set.
func (o *Notification) HasHuaweiAccentColor() bool {
	if o != nil && o.HuaweiAccentColor != nil {
		return true
	}

	return false
}

// SetHuaweiAccentColor gets a reference to the given string and assigns it to the HuaweiAccentColor field.
func (o *Notification) SetHuaweiAccentColor(v string) {
	o.HuaweiAccentColor = &v
}

// GetAndroidVisibility returns the AndroidVisibility field value if set, zero value otherwise.
func (o *Notification) GetAndroidVisibility() int32 {
	if o == nil || o.AndroidVisibility == nil {
		var ret int32
		return ret
	}
	return *o.AndroidVisibility
}

// GetAndroidVisibilityOk returns a tuple with the AndroidVisibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetAndroidVisibilityOk() (*int32, bool) {
	if o == nil || o.AndroidVisibility == nil {
		return nil, false
	}
	return o.AndroidVisibility, true
}

// HasAndroidVisibility returns a boolean if a field has been set.
func (o *Notification) HasAndroidVisibility() bool {
	if o != nil && o.AndroidVisibility != nil {
		return true
	}

	return false
}

// SetAndroidVisibility gets a reference to the given int32 and assigns it to the AndroidVisibility field.
func (o *Notification) SetAndroidVisibility(v int32) {
	o.AndroidVisibility = &v
}

// GetHuaweiVisibility returns the HuaweiVisibility field value if set, zero value otherwise.
func (o *Notification) GetHuaweiVisibility() int32 {
	if o == nil || o.HuaweiVisibility == nil {
		var ret int32
		return ret
	}
	return *o.HuaweiVisibility
}

// GetHuaweiVisibilityOk returns a tuple with the HuaweiVisibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetHuaweiVisibilityOk() (*int32, bool) {
	if o == nil || o.HuaweiVisibility == nil {
		return nil, false
	}
	return o.HuaweiVisibility, true
}

// HasHuaweiVisibility returns a boolean if a field has been set.
func (o *Notification) HasHuaweiVisibility() bool {
	if o != nil && o.HuaweiVisibility != nil {
		return true
	}

	return false
}

// SetHuaweiVisibility gets a reference to the given int32 and assigns it to the HuaweiVisibility field.
func (o *Notification) SetHuaweiVisibility(v int32) {
	o.HuaweiVisibility = &v
}

// GetIosBadgeType returns the IosBadgeType field value if set, zero value otherwise.
func (o *Notification) GetIosBadgeType() string {
	if o == nil || o.IosBadgeType == nil {
		var ret string
		return ret
	}
	return *o.IosBadgeType
}

// GetIosBadgeTypeOk returns a tuple with the IosBadgeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIosBadgeTypeOk() (*string, bool) {
	if o == nil || o.IosBadgeType == nil {
		return nil, false
	}
	return o.IosBadgeType, true
}

// HasIosBadgeType returns a boolean if a field has been set.
func (o *Notification) HasIosBadgeType() bool {
	if o != nil && o.IosBadgeType != nil {
		return true
	}

	return false
}

// SetIosBadgeType gets a reference to the given string and assigns it to the IosBadgeType field.
func (o *Notification) SetIosBadgeType(v string) {
	o.IosBadgeType = &v
}

// GetIosBadgeCount returns the IosBadgeCount field value if set, zero value otherwise.
func (o *Notification) GetIosBadgeCount() int32 {
	if o == nil || o.IosBadgeCount == nil {
		var ret int32
		return ret
	}
	return *o.IosBadgeCount
}

// GetIosBadgeCountOk returns a tuple with the IosBadgeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIosBadgeCountOk() (*int32, bool) {
	if o == nil || o.IosBadgeCount == nil {
		return nil, false
	}
	return o.IosBadgeCount, true
}

// HasIosBadgeCount returns a boolean if a field has been set.
func (o *Notification) HasIosBadgeCount() bool {
	if o != nil && o.IosBadgeCount != nil {
		return true
	}

	return false
}

// SetIosBadgeCount gets a reference to the given int32 and assigns it to the IosBadgeCount field.
func (o *Notification) SetIosBadgeCount(v int32) {
	o.IosBadgeCount = &v
}

// GetCollapseId returns the CollapseId field value if set, zero value otherwise.
func (o *Notification) GetCollapseId() string {
	if o == nil || o.CollapseId == nil {
		var ret string
		return ret
	}
	return *o.CollapseId
}

// GetCollapseIdOk returns a tuple with the CollapseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetCollapseIdOk() (*string, bool) {
	if o == nil || o.CollapseId == nil {
		return nil, false
	}
	return o.CollapseId, true
}

// HasCollapseId returns a boolean if a field has been set.
func (o *Notification) HasCollapseId() bool {
	if o != nil && o.CollapseId != nil {
		return true
	}

	return false
}

// SetCollapseId gets a reference to the given string and assigns it to the CollapseId field.
func (o *Notification) SetCollapseId(v string) {
	o.CollapseId = &v
}

// GetWebPushTopic returns the WebPushTopic field value if set, zero value otherwise.
func (o *Notification) GetWebPushTopic() string {
	if o == nil || o.WebPushTopic == nil {
		var ret string
		return ret
	}
	return *o.WebPushTopic
}

// GetWebPushTopicOk returns a tuple with the WebPushTopic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetWebPushTopicOk() (*string, bool) {
	if o == nil || o.WebPushTopic == nil {
		return nil, false
	}
	return o.WebPushTopic, true
}

// HasWebPushTopic returns a boolean if a field has been set.
func (o *Notification) HasWebPushTopic() bool {
	if o != nil && o.WebPushTopic != nil {
		return true
	}

	return false
}

// SetWebPushTopic gets a reference to the given string and assigns it to the WebPushTopic field.
func (o *Notification) SetWebPushTopic(v string) {
	o.WebPushTopic = &v
}

// GetApnsAlert returns the ApnsAlert field value if set, zero value otherwise.
func (o *Notification) GetApnsAlert() map[string]interface{} {
	if o == nil || o.ApnsAlert == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.ApnsAlert
}

// GetApnsAlertOk returns a tuple with the ApnsAlert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetApnsAlertOk() (map[string]interface{}, bool) {
	if o == nil || o.ApnsAlert == nil {
		return nil, false
	}
	return o.ApnsAlert, true
}

// HasApnsAlert returns a boolean if a field has been set.
func (o *Notification) HasApnsAlert() bool {
	if o != nil && o.ApnsAlert != nil {
		return true
	}

	return false
}

// SetApnsAlert gets a reference to the given map[string]interface{} and assigns it to the ApnsAlert field.
func (o *Notification) SetApnsAlert(v map[string]interface{}) {
	o.ApnsAlert = v
}

// GetSendAfter returns the SendAfter field value if set, zero value otherwise.
func (o *Notification) GetSendAfter() string {
	if o == nil || o.SendAfter == nil {
		var ret string
		return ret
	}
	return *o.SendAfter
}

// GetSendAfterOk returns a tuple with the SendAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetSendAfterOk() (*string, bool) {
	if o == nil || o.SendAfter == nil {
		return nil, false
	}
	return o.SendAfter, true
}

// HasSendAfter returns a boolean if a field has been set.
func (o *Notification) HasSendAfter() bool {
	if o != nil && o.SendAfter != nil {
		return true
	}

	return false
}

// SetSendAfter gets a reference to the given string and assigns it to the SendAfter field.
func (o *Notification) SetSendAfter(v string) {
	o.SendAfter = &v
}

// GetDelayedOption returns the DelayedOption field value if set, zero value otherwise.
func (o *Notification) GetDelayedOption() string {
	if o == nil || o.DelayedOption == nil {
		var ret string
		return ret
	}
	return *o.DelayedOption
}

// GetDelayedOptionOk returns a tuple with the DelayedOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetDelayedOptionOk() (*string, bool) {
	if o == nil || o.DelayedOption == nil {
		return nil, false
	}
	return o.DelayedOption, true
}

// HasDelayedOption returns a boolean if a field has been set.
func (o *Notification) HasDelayedOption() bool {
	if o != nil && o.DelayedOption != nil {
		return true
	}

	return false
}

// SetDelayedOption gets a reference to the given string and assigns it to the DelayedOption field.
func (o *Notification) SetDelayedOption(v string) {
	o.DelayedOption = &v
}

// GetDeliveryTimeOfDay returns the DeliveryTimeOfDay field value if set, zero value otherwise.
func (o *Notification) GetDeliveryTimeOfDay() string {
	if o == nil || o.DeliveryTimeOfDay == nil {
		var ret string
		return ret
	}
	return *o.DeliveryTimeOfDay
}

// GetDeliveryTimeOfDayOk returns a tuple with the DeliveryTimeOfDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetDeliveryTimeOfDayOk() (*string, bool) {
	if o == nil || o.DeliveryTimeOfDay == nil {
		return nil, false
	}
	return o.DeliveryTimeOfDay, true
}

// HasDeliveryTimeOfDay returns a boolean if a field has been set.
func (o *Notification) HasDeliveryTimeOfDay() bool {
	if o != nil && o.DeliveryTimeOfDay != nil {
		return true
	}

	return false
}

// SetDeliveryTimeOfDay gets a reference to the given string and assigns it to the DeliveryTimeOfDay field.
func (o *Notification) SetDeliveryTimeOfDay(v string) {
	o.DeliveryTimeOfDay = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *Notification) GetTtl() int32 {
	if o == nil || o.Ttl == nil {
		var ret int32
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetTtlOk() (*int32, bool) {
	if o == nil || o.Ttl == nil {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *Notification) HasTtl() bool {
	if o != nil && o.Ttl != nil {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int32 and assigns it to the Ttl field.
func (o *Notification) SetTtl(v int32) {
	o.Ttl = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *Notification) GetPriority() int32 {
	if o == nil || o.Priority == nil {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetPriorityOk() (*int32, bool) {
	if o == nil || o.Priority == nil {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *Notification) HasPriority() bool {
	if o != nil && o.Priority != nil {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *Notification) SetPriority(v int32) {
	o.Priority = &v
}

// GetApnsPushTypeOverride returns the ApnsPushTypeOverride field value if set, zero value otherwise.
func (o *Notification) GetApnsPushTypeOverride() string {
	if o == nil || o.ApnsPushTypeOverride == nil {
		var ret string
		return ret
	}
	return *o.ApnsPushTypeOverride
}

// GetApnsPushTypeOverrideOk returns a tuple with the ApnsPushTypeOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetApnsPushTypeOverrideOk() (*string, bool) {
	if o == nil || o.ApnsPushTypeOverride == nil {
		return nil, false
	}
	return o.ApnsPushTypeOverride, true
}

// HasApnsPushTypeOverride returns a boolean if a field has been set.
func (o *Notification) HasApnsPushTypeOverride() bool {
	if o != nil && o.ApnsPushTypeOverride != nil {
		return true
	}

	return false
}

// SetApnsPushTypeOverride gets a reference to the given string and assigns it to the ApnsPushTypeOverride field.
func (o *Notification) SetApnsPushTypeOverride(v string) {
	o.ApnsPushTypeOverride = &v
}

// GetThrottleRatePerMinute returns the ThrottleRatePerMinute field value if set, zero value otherwise.
func (o *Notification) GetThrottleRatePerMinute() string {
	if o == nil || o.ThrottleRatePerMinute == nil {
		var ret string
		return ret
	}
	return *o.ThrottleRatePerMinute
}

// GetThrottleRatePerMinuteOk returns a tuple with the ThrottleRatePerMinute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetThrottleRatePerMinuteOk() (*string, bool) {
	if o == nil || o.ThrottleRatePerMinute == nil {
		return nil, false
	}
	return o.ThrottleRatePerMinute, true
}

// HasThrottleRatePerMinute returns a boolean if a field has been set.
func (o *Notification) HasThrottleRatePerMinute() bool {
	if o != nil && o.ThrottleRatePerMinute != nil {
		return true
	}

	return false
}

// SetThrottleRatePerMinute gets a reference to the given string and assigns it to the ThrottleRatePerMinute field.
func (o *Notification) SetThrottleRatePerMinute(v string) {
	o.ThrottleRatePerMinute = &v
}

// GetAndroidGroup returns the AndroidGroup field value if set, zero value otherwise.
func (o *Notification) GetAndroidGroup() string {
	if o == nil || o.AndroidGroup == nil {
		var ret string
		return ret
	}
	return *o.AndroidGroup
}

// GetAndroidGroupOk returns a tuple with the AndroidGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetAndroidGroupOk() (*string, bool) {
	if o == nil || o.AndroidGroup == nil {
		return nil, false
	}
	return o.AndroidGroup, true
}

// HasAndroidGroup returns a boolean if a field has been set.
func (o *Notification) HasAndroidGroup() bool {
	if o != nil && o.AndroidGroup != nil {
		return true
	}

	return false
}

// SetAndroidGroup gets a reference to the given string and assigns it to the AndroidGroup field.
func (o *Notification) SetAndroidGroup(v string) {
	o.AndroidGroup = &v
}

// GetAndroidGroupMessage returns the AndroidGroupMessage field value if set, zero value otherwise.
func (o *Notification) GetAndroidGroupMessage() string {
	if o == nil || o.AndroidGroupMessage == nil {
		var ret string
		return ret
	}
	return *o.AndroidGroupMessage
}

// GetAndroidGroupMessageOk returns a tuple with the AndroidGroupMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetAndroidGroupMessageOk() (*string, bool) {
	if o == nil || o.AndroidGroupMessage == nil {
		return nil, false
	}
	return o.AndroidGroupMessage, true
}

// HasAndroidGroupMessage returns a boolean if a field has been set.
func (o *Notification) HasAndroidGroupMessage() bool {
	if o != nil && o.AndroidGroupMessage != nil {
		return true
	}

	return false
}

// SetAndroidGroupMessage gets a reference to the given string and assigns it to the AndroidGroupMessage field.
func (o *Notification) SetAndroidGroupMessage(v string) {
	o.AndroidGroupMessage = &v
}

// GetAdmGroup returns the AdmGroup field value if set, zero value otherwise.
func (o *Notification) GetAdmGroup() string {
	if o == nil || o.AdmGroup == nil {
		var ret string
		return ret
	}
	return *o.AdmGroup
}

// GetAdmGroupOk returns a tuple with the AdmGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetAdmGroupOk() (*string, bool) {
	if o == nil || o.AdmGroup == nil {
		return nil, false
	}
	return o.AdmGroup, true
}

// HasAdmGroup returns a boolean if a field has been set.
func (o *Notification) HasAdmGroup() bool {
	if o != nil && o.AdmGroup != nil {
		return true
	}

	return false
}

// SetAdmGroup gets a reference to the given string and assigns it to the AdmGroup field.
func (o *Notification) SetAdmGroup(v string) {
	o.AdmGroup = &v
}

// GetAdmGroupMessage returns the AdmGroupMessage field value if set, zero value otherwise.
func (o *Notification) GetAdmGroupMessage() map[string]interface{} {
	if o == nil || o.AdmGroupMessage == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AdmGroupMessage
}

// GetAdmGroupMessageOk returns a tuple with the AdmGroupMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetAdmGroupMessageOk() (map[string]interface{}, bool) {
	if o == nil || o.AdmGroupMessage == nil {
		return nil, false
	}
	return o.AdmGroupMessage, true
}

// HasAdmGroupMessage returns a boolean if a field has been set.
func (o *Notification) HasAdmGroupMessage() bool {
	if o != nil && o.AdmGroupMessage != nil {
		return true
	}

	return false
}

// SetAdmGroupMessage gets a reference to the given map[string]interface{} and assigns it to the AdmGroupMessage field.
func (o *Notification) SetAdmGroupMessage(v map[string]interface{}) {
	o.AdmGroupMessage = v
}

// GetThreadId returns the ThreadId field value if set, zero value otherwise.
func (o *Notification) GetThreadId() string {
	if o == nil || o.ThreadId == nil {
		var ret string
		return ret
	}
	return *o.ThreadId
}

// GetThreadIdOk returns a tuple with the ThreadId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetThreadIdOk() (*string, bool) {
	if o == nil || o.ThreadId == nil {
		return nil, false
	}
	return o.ThreadId, true
}

// HasThreadId returns a boolean if a field has been set.
func (o *Notification) HasThreadId() bool {
	if o != nil && o.ThreadId != nil {
		return true
	}

	return false
}

// SetThreadId gets a reference to the given string and assigns it to the ThreadId field.
func (o *Notification) SetThreadId(v string) {
	o.ThreadId = &v
}

// GetSummaryArg returns the SummaryArg field value if set, zero value otherwise.
func (o *Notification) GetSummaryArg() string {
	if o == nil || o.SummaryArg == nil {
		var ret string
		return ret
	}
	return *o.SummaryArg
}

// GetSummaryArgOk returns a tuple with the SummaryArg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetSummaryArgOk() (*string, bool) {
	if o == nil || o.SummaryArg == nil {
		return nil, false
	}
	return o.SummaryArg, true
}

// HasSummaryArg returns a boolean if a field has been set.
func (o *Notification) HasSummaryArg() bool {
	if o != nil && o.SummaryArg != nil {
		return true
	}

	return false
}

// SetSummaryArg gets a reference to the given string and assigns it to the SummaryArg field.
func (o *Notification) SetSummaryArg(v string) {
	o.SummaryArg = &v
}

// GetSummaryArgCount returns the SummaryArgCount field value if set, zero value otherwise.
func (o *Notification) GetSummaryArgCount() int32 {
	if o == nil || o.SummaryArgCount == nil {
		var ret int32
		return ret
	}
	return *o.SummaryArgCount
}

// GetSummaryArgCountOk returns a tuple with the SummaryArgCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetSummaryArgCountOk() (*int32, bool) {
	if o == nil || o.SummaryArgCount == nil {
		return nil, false
	}
	return o.SummaryArgCount, true
}

// HasSummaryArgCount returns a boolean if a field has been set.
func (o *Notification) HasSummaryArgCount() bool {
	if o != nil && o.SummaryArgCount != nil {
		return true
	}

	return false
}

// SetSummaryArgCount gets a reference to the given int32 and assigns it to the SummaryArgCount field.
func (o *Notification) SetSummaryArgCount(v int32) {
	o.SummaryArgCount = &v
}

// GetEmailSubject returns the EmailSubject field value if set, zero value otherwise.
func (o *Notification) GetEmailSubject() string {
	if o == nil || o.EmailSubject == nil {
		var ret string
		return ret
	}
	return *o.EmailSubject
}

// GetEmailSubjectOk returns a tuple with the EmailSubject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetEmailSubjectOk() (*string, bool) {
	if o == nil || o.EmailSubject == nil {
		return nil, false
	}
	return o.EmailSubject, true
}

// HasEmailSubject returns a boolean if a field has been set.
func (o *Notification) HasEmailSubject() bool {
	if o != nil && o.EmailSubject != nil {
		return true
	}

	return false
}

// SetEmailSubject gets a reference to the given string and assigns it to the EmailSubject field.
func (o *Notification) SetEmailSubject(v string) {
	o.EmailSubject = &v
}

// GetEmailBody returns the EmailBody field value if set, zero value otherwise.
func (o *Notification) GetEmailBody() string {
	if o == nil || o.EmailBody == nil {
		var ret string
		return ret
	}
	return *o.EmailBody
}

// GetEmailBodyOk returns a tuple with the EmailBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetEmailBodyOk() (*string, bool) {
	if o == nil || o.EmailBody == nil {
		return nil, false
	}
	return o.EmailBody, true
}

// HasEmailBody returns a boolean if a field has been set.
func (o *Notification) HasEmailBody() bool {
	if o != nil && o.EmailBody != nil {
		return true
	}

	return false
}

// SetEmailBody gets a reference to the given string and assigns it to the EmailBody field.
func (o *Notification) SetEmailBody(v string) {
	o.EmailBody = &v
}

// GetEmailFromName returns the EmailFromName field value if set, zero value otherwise.
func (o *Notification) GetEmailFromName() string {
	if o == nil || o.EmailFromName == nil {
		var ret string
		return ret
	}
	return *o.EmailFromName
}

// GetEmailFromNameOk returns a tuple with the EmailFromName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetEmailFromNameOk() (*string, bool) {
	if o == nil || o.EmailFromName == nil {
		return nil, false
	}
	return o.EmailFromName, true
}

// HasEmailFromName returns a boolean if a field has been set.
func (o *Notification) HasEmailFromName() bool {
	if o != nil && o.EmailFromName != nil {
		return true
	}

	return false
}

// SetEmailFromName gets a reference to the given string and assigns it to the EmailFromName field.
func (o *Notification) SetEmailFromName(v string) {
	o.EmailFromName = &v
}

// GetEmailFromAddress returns the EmailFromAddress field value if set, zero value otherwise.
func (o *Notification) GetEmailFromAddress() string {
	if o == nil || o.EmailFromAddress == nil {
		var ret string
		return ret
	}
	return *o.EmailFromAddress
}

// GetEmailFromAddressOk returns a tuple with the EmailFromAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetEmailFromAddressOk() (*string, bool) {
	if o == nil || o.EmailFromAddress == nil {
		return nil, false
	}
	return o.EmailFromAddress, true
}

// HasEmailFromAddress returns a boolean if a field has been set.
func (o *Notification) HasEmailFromAddress() bool {
	if o != nil && o.EmailFromAddress != nil {
		return true
	}

	return false
}

// SetEmailFromAddress gets a reference to the given string and assigns it to the EmailFromAddress field.
func (o *Notification) SetEmailFromAddress(v string) {
	o.EmailFromAddress = &v
}

// GetSmsFrom returns the SmsFrom field value if set, zero value otherwise.
func (o *Notification) GetSmsFrom() string {
	if o == nil || o.SmsFrom == nil {
		var ret string
		return ret
	}
	return *o.SmsFrom
}

// GetSmsFromOk returns a tuple with the SmsFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetSmsFromOk() (*string, bool) {
	if o == nil || o.SmsFrom == nil {
		return nil, false
	}
	return o.SmsFrom, true
}

// HasSmsFrom returns a boolean if a field has been set.
func (o *Notification) HasSmsFrom() bool {
	if o != nil && o.SmsFrom != nil {
		return true
	}

	return false
}

// SetSmsFrom gets a reference to the given string and assigns it to the SmsFrom field.
func (o *Notification) SetSmsFrom(v string) {
	o.SmsFrom = &v
}

// GetSmsMediaUrls returns the SmsMediaUrls field value if set, zero value otherwise.
func (o *Notification) GetSmsMediaUrls() []string {
	if o == nil || o.SmsMediaUrls == nil {
		var ret []string
		return ret
	}
	return o.SmsMediaUrls
}

// GetSmsMediaUrlsOk returns a tuple with the SmsMediaUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetSmsMediaUrlsOk() ([]string, bool) {
	if o == nil || o.SmsMediaUrls == nil {
		return nil, false
	}
	return o.SmsMediaUrls, true
}

// HasSmsMediaUrls returns a boolean if a field has been set.
func (o *Notification) HasSmsMediaUrls() bool {
	if o != nil && o.SmsMediaUrls != nil {
		return true
	}

	return false
}

// SetSmsMediaUrls gets a reference to the given []string and assigns it to the SmsMediaUrls field.
func (o *Notification) SetSmsMediaUrls(v []string) {
	o.SmsMediaUrls = v
}

func (o Notification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IncludedSegments != nil {
		toSerialize["included_segments"] = o.IncludedSegments
	}
	if o.ExcludedSegments != nil {
		toSerialize["excluded_segments"] = o.ExcludedSegments
	}
	if o.LastSession != nil {
		toSerialize["last_session"] = o.LastSession
	}
	if o.FirstSession != nil {
		toSerialize["first_session"] = o.FirstSession
	}
	if o.SessionCount != nil {
		toSerialize["session_count"] = o.SessionCount
	}
	if o.SessionTime != nil {
		toSerialize["session_time"] = o.SessionTime
	}
	if o.AmountSpent != nil {
		toSerialize["amount_spent"] = o.AmountSpent
	}
	if o.BoughtSku != nil {
		toSerialize["bought_sku"] = o.BoughtSku
	}
	if o.Tag != nil {
		toSerialize["tag"] = o.Tag
	}
	if o.Language != nil {
		toSerialize["language"] = o.Language
	}
	if o.AppVersion != nil {
		toSerialize["app_version"] = o.AppVersion
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.IncludePlayerIds != nil {
		toSerialize["include_player_ids"] = o.IncludePlayerIds
	}
	if o.IncludeExternalUserIds != nil {
		toSerialize["include_external_user_ids"] = o.IncludeExternalUserIds
	}
	if o.IncludeEmailTokens != nil {
		toSerialize["include_email_tokens"] = o.IncludeEmailTokens
	}
	if o.IncludePhoneNumbers != nil {
		toSerialize["include_phone_numbers"] = o.IncludePhoneNumbers
	}
	if o.IncludeIosTokens != nil {
		toSerialize["include_ios_tokens"] = o.IncludeIosTokens
	}
	if o.IncludeWpWnsUris != nil {
		toSerialize["include_wp_wns_uris"] = o.IncludeWpWnsUris
	}
	if o.IncludeAmazonRegIds != nil {
		toSerialize["include_amazon_reg_ids"] = o.IncludeAmazonRegIds
	}
	if o.IncludeChromeRegIds != nil {
		toSerialize["include_chrome_reg_ids"] = o.IncludeChromeRegIds
	}
	if o.IncludeChromeWebRegIds != nil {
		toSerialize["include_chrome_web_reg_ids"] = o.IncludeChromeWebRegIds
	}
	if o.IncludeAndroidRegIds != nil {
		toSerialize["include_android_reg_ids"] = o.IncludeAndroidRegIds
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.Aggregation != nil {
		toSerialize["aggregation"] = o.Aggregation
	}
	if o.IsIos != nil {
		toSerialize["isIos"] = o.IsIos
	}
	if o.IsAndroid != nil {
		toSerialize["isAndroid"] = o.IsAndroid
	}
	if o.IsHuawei != nil {
		toSerialize["isHuawei"] = o.IsHuawei
	}
	if o.IsAnyWeb != nil {
		toSerialize["isAnyWeb"] = o.IsAnyWeb
	}
	if o.IsChromeWeb != nil {
		toSerialize["isChromeWeb"] = o.IsChromeWeb
	}
	if o.IsFirefox != nil {
		toSerialize["isFirefox"] = o.IsFirefox
	}
	if o.IsSafari != nil {
		toSerialize["isSafari"] = o.IsSafari
	}
	if o.IsWPWNS != nil {
		toSerialize["isWP_WNS"] = o.IsWPWNS
	}
	if o.IsAdm != nil {
		toSerialize["isAdm"] = o.IsAdm
	}
	if o.IsChrome != nil {
		toSerialize["isChrome"] = o.IsChrome
	}
	if o.ChannelForExternalUserIds != nil {
		toSerialize["channel_for_external_user_ids"] = o.ChannelForExternalUserIds
	}
	if true {
		toSerialize["app_id"] = o.AppId
	}
	if o.ExternalId != nil {
		toSerialize["external_id"] = o.ExternalId
	}
	if o.Contents.IsSet() {
		toSerialize["contents"] = o.Contents.Get()
	}
	if o.Headings.IsSet() {
		toSerialize["headings"] = o.Headings.Get()
	}
	if o.Subtitle.IsSet() {
		toSerialize["subtitle"] = o.Subtitle.Get()
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.HuaweiMsgType != nil {
		toSerialize["huawei_msg_type"] = o.HuaweiMsgType
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.WebUrl != nil {
		toSerialize["web_url"] = o.WebUrl
	}
	if o.AppUrl != nil {
		toSerialize["app_url"] = o.AppUrl
	}
	if o.IosAttachments != nil {
		toSerialize["ios_attachments"] = o.IosAttachments
	}
	if o.TemplateId != nil {
		toSerialize["template_id"] = o.TemplateId
	}
	if o.ContentAvailable != nil {
		toSerialize["content_available"] = o.ContentAvailable
	}
	if o.MutableContent != nil {
		toSerialize["mutable_content"] = o.MutableContent
	}
	if o.TargetContentIdentifier != nil {
		toSerialize["target_content_identifier"] = o.TargetContentIdentifier
	}
	if o.BigPicture != nil {
		toSerialize["big_picture"] = o.BigPicture
	}
	if o.HuaweiBigPicture != nil {
		toSerialize["huawei_big_picture"] = o.HuaweiBigPicture
	}
	if o.AdmBigPicture != nil {
		toSerialize["adm_big_picture"] = o.AdmBigPicture
	}
	if o.ChromeBigPicture != nil {
		toSerialize["chrome_big_picture"] = o.ChromeBigPicture
	}
	if o.ChromeWebImage != nil {
		toSerialize["chrome_web_image"] = o.ChromeWebImage
	}
	if o.Buttons != nil {
		toSerialize["buttons"] = o.Buttons
	}
	if o.WebButtons != nil {
		toSerialize["web_buttons"] = o.WebButtons
	}
	if o.IosCategory != nil {
		toSerialize["ios_category"] = o.IosCategory
	}
	if o.AndroidChannelId != nil {
		toSerialize["android_channel_id"] = o.AndroidChannelId
	}
	if o.HuaweiChannelId != nil {
		toSerialize["huawei_channel_id"] = o.HuaweiChannelId
	}
	if o.ExistingAndroidChannelId != nil {
		toSerialize["existing_android_channel_id"] = o.ExistingAndroidChannelId
	}
	if o.HuaweiExistingChannelId != nil {
		toSerialize["huawei_existing_channel_id"] = o.HuaweiExistingChannelId
	}
	if o.AndroidBackgroundLayout != nil {
		toSerialize["android_background_layout"] = o.AndroidBackgroundLayout
	}
	if o.SmallIcon != nil {
		toSerialize["small_icon"] = o.SmallIcon
	}
	if o.HuaweiSmallIcon != nil {
		toSerialize["huawei_small_icon"] = o.HuaweiSmallIcon
	}
	if o.LargeIcon != nil {
		toSerialize["large_icon"] = o.LargeIcon
	}
	if o.HuaweiLargeIcon != nil {
		toSerialize["huawei_large_icon"] = o.HuaweiLargeIcon
	}
	if o.AdmSmallIcon != nil {
		toSerialize["adm_small_icon"] = o.AdmSmallIcon
	}
	if o.AdmLargeIcon != nil {
		toSerialize["adm_large_icon"] = o.AdmLargeIcon
	}
	if o.ChromeWebIcon != nil {
		toSerialize["chrome_web_icon"] = o.ChromeWebIcon
	}
	if o.ChromeWebBadge != nil {
		toSerialize["chrome_web_badge"] = o.ChromeWebBadge
	}
	if o.FirefoxIcon != nil {
		toSerialize["firefox_icon"] = o.FirefoxIcon
	}
	if o.ChromeIcon != nil {
		toSerialize["chrome_icon"] = o.ChromeIcon
	}
	if o.IosSound != nil {
		toSerialize["ios_sound"] = o.IosSound
	}
	if o.AndroidSound != nil {
		toSerialize["android_sound"] = o.AndroidSound
	}
	if o.HuaweiSound != nil {
		toSerialize["huawei_sound"] = o.HuaweiSound
	}
	if o.AdmSound != nil {
		toSerialize["adm_sound"] = o.AdmSound
	}
	if o.WpWnsSound != nil {
		toSerialize["wp_wns_sound"] = o.WpWnsSound
	}
	if o.AndroidLedColor != nil {
		toSerialize["android_led_color"] = o.AndroidLedColor
	}
	if o.HuaweiLedColor != nil {
		toSerialize["huawei_led_color"] = o.HuaweiLedColor
	}
	if o.AndroidAccentColor != nil {
		toSerialize["android_accent_color"] = o.AndroidAccentColor
	}
	if o.HuaweiAccentColor != nil {
		toSerialize["huawei_accent_color"] = o.HuaweiAccentColor
	}
	if o.AndroidVisibility != nil {
		toSerialize["android_visibility"] = o.AndroidVisibility
	}
	if o.HuaweiVisibility != nil {
		toSerialize["huawei_visibility"] = o.HuaweiVisibility
	}
	if o.IosBadgeType != nil {
		toSerialize["ios_badgeType"] = o.IosBadgeType
	}
	if o.IosBadgeCount != nil {
		toSerialize["ios_badgeCount"] = o.IosBadgeCount
	}
	if o.CollapseId != nil {
		toSerialize["collapse_id"] = o.CollapseId
	}
	if o.WebPushTopic != nil {
		toSerialize["web_push_topic"] = o.WebPushTopic
	}
	if o.ApnsAlert != nil {
		toSerialize["apns_alert"] = o.ApnsAlert
	}
	if o.SendAfter != nil {
		toSerialize["send_after"] = o.SendAfter
	}
	if o.DelayedOption != nil {
		toSerialize["delayed_option"] = o.DelayedOption
	}
	if o.DeliveryTimeOfDay != nil {
		toSerialize["delivery_time_of_day"] = o.DeliveryTimeOfDay
	}
	if o.Ttl != nil {
		toSerialize["ttl"] = o.Ttl
	}
	if o.Priority != nil {
		toSerialize["priority"] = o.Priority
	}
	if o.ApnsPushTypeOverride != nil {
		toSerialize["apns_push_type_override"] = o.ApnsPushTypeOverride
	}
	if o.ThrottleRatePerMinute != nil {
		toSerialize["throttle_rate_per_minute"] = o.ThrottleRatePerMinute
	}
	if o.AndroidGroup != nil {
		toSerialize["android_group"] = o.AndroidGroup
	}
	if o.AndroidGroupMessage != nil {
		toSerialize["android_group_message"] = o.AndroidGroupMessage
	}
	if o.AdmGroup != nil {
		toSerialize["adm_group"] = o.AdmGroup
	}
	if o.AdmGroupMessage != nil {
		toSerialize["adm_group_message"] = o.AdmGroupMessage
	}
	if o.ThreadId != nil {
		toSerialize["thread_id"] = o.ThreadId
	}
	if o.SummaryArg != nil {
		toSerialize["summary_arg"] = o.SummaryArg
	}
	if o.SummaryArgCount != nil {
		toSerialize["summary_arg_count"] = o.SummaryArgCount
	}
	if o.EmailSubject != nil {
		toSerialize["email_subject"] = o.EmailSubject
	}
	if o.EmailBody != nil {
		toSerialize["email_body"] = o.EmailBody
	}
	if o.EmailFromName != nil {
		toSerialize["email_from_name"] = o.EmailFromName
	}
	if o.EmailFromAddress != nil {
		toSerialize["email_from_address"] = o.EmailFromAddress
	}
	if o.SmsFrom != nil {
		toSerialize["sms_from"] = o.SmsFrom
	}
	if o.SmsMediaUrls != nil {
		toSerialize["sms_media_urls"] = o.SmsMediaUrls
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *Notification) UnmarshalJSON(bytes []byte) (err error) {
	varNotification := _Notification{}

	if err = json.Unmarshal(bytes, &varNotification); err == nil {
		*o = Notification(varNotification)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "included_segments")
		delete(additionalProperties, "excluded_segments")
		delete(additionalProperties, "last_session")
		delete(additionalProperties, "first_session")
		delete(additionalProperties, "session_count")
		delete(additionalProperties, "session_time")
		delete(additionalProperties, "amount_spent")
		delete(additionalProperties, "bought_sku")
		delete(additionalProperties, "tag")
		delete(additionalProperties, "language")
		delete(additionalProperties, "app_version")
		delete(additionalProperties, "location")
		delete(additionalProperties, "email")
		delete(additionalProperties, "country")
		delete(additionalProperties, "include_player_ids")
		delete(additionalProperties, "include_external_user_ids")
		delete(additionalProperties, "include_email_tokens")
		delete(additionalProperties, "include_phone_numbers")
		delete(additionalProperties, "include_ios_tokens")
		delete(additionalProperties, "include_wp_wns_uris")
		delete(additionalProperties, "include_amazon_reg_ids")
		delete(additionalProperties, "include_chrome_reg_ids")
		delete(additionalProperties, "include_chrome_web_reg_ids")
		delete(additionalProperties, "include_android_reg_ids")
		delete(additionalProperties, "id")
		delete(additionalProperties, "value")
		delete(additionalProperties, "aggregation")
		delete(additionalProperties, "isIos")
		delete(additionalProperties, "isAndroid")
		delete(additionalProperties, "isHuawei")
		delete(additionalProperties, "isAnyWeb")
		delete(additionalProperties, "isChromeWeb")
		delete(additionalProperties, "isFirefox")
		delete(additionalProperties, "isSafari")
		delete(additionalProperties, "isWP_WNS")
		delete(additionalProperties, "isAdm")
		delete(additionalProperties, "isChrome")
		delete(additionalProperties, "channel_for_external_user_ids")
		delete(additionalProperties, "app_id")
		delete(additionalProperties, "external_id")
		delete(additionalProperties, "contents")
		delete(additionalProperties, "headings")
		delete(additionalProperties, "subtitle")
		delete(additionalProperties, "data")
		delete(additionalProperties, "huawei_msg_type")
		delete(additionalProperties, "url")
		delete(additionalProperties, "web_url")
		delete(additionalProperties, "app_url")
		delete(additionalProperties, "ios_attachments")
		delete(additionalProperties, "template_id")
		delete(additionalProperties, "content_available")
		delete(additionalProperties, "mutable_content")
		delete(additionalProperties, "target_content_identifier")
		delete(additionalProperties, "big_picture")
		delete(additionalProperties, "huawei_big_picture")
		delete(additionalProperties, "adm_big_picture")
		delete(additionalProperties, "chrome_big_picture")
		delete(additionalProperties, "chrome_web_image")
		delete(additionalProperties, "buttons")
		delete(additionalProperties, "web_buttons")
		delete(additionalProperties, "ios_category")
		delete(additionalProperties, "android_channel_id")
		delete(additionalProperties, "huawei_channel_id")
		delete(additionalProperties, "existing_android_channel_id")
		delete(additionalProperties, "huawei_existing_channel_id")
		delete(additionalProperties, "android_background_layout")
		delete(additionalProperties, "small_icon")
		delete(additionalProperties, "huawei_small_icon")
		delete(additionalProperties, "large_icon")
		delete(additionalProperties, "huawei_large_icon")
		delete(additionalProperties, "adm_small_icon")
		delete(additionalProperties, "adm_large_icon")
		delete(additionalProperties, "chrome_web_icon")
		delete(additionalProperties, "chrome_web_badge")
		delete(additionalProperties, "firefox_icon")
		delete(additionalProperties, "chrome_icon")
		delete(additionalProperties, "ios_sound")
		delete(additionalProperties, "android_sound")
		delete(additionalProperties, "huawei_sound")
		delete(additionalProperties, "adm_sound")
		delete(additionalProperties, "wp_wns_sound")
		delete(additionalProperties, "android_led_color")
		delete(additionalProperties, "huawei_led_color")
		delete(additionalProperties, "android_accent_color")
		delete(additionalProperties, "huawei_accent_color")
		delete(additionalProperties, "android_visibility")
		delete(additionalProperties, "huawei_visibility")
		delete(additionalProperties, "ios_badgeType")
		delete(additionalProperties, "ios_badgeCount")
		delete(additionalProperties, "collapse_id")
		delete(additionalProperties, "web_push_topic")
		delete(additionalProperties, "apns_alert")
		delete(additionalProperties, "send_after")
		delete(additionalProperties, "delayed_option")
		delete(additionalProperties, "delivery_time_of_day")
		delete(additionalProperties, "ttl")
		delete(additionalProperties, "priority")
		delete(additionalProperties, "apns_push_type_override")
		delete(additionalProperties, "throttle_rate_per_minute")
		delete(additionalProperties, "android_group")
		delete(additionalProperties, "android_group_message")
		delete(additionalProperties, "adm_group")
		delete(additionalProperties, "adm_group_message")
		delete(additionalProperties, "thread_id")
		delete(additionalProperties, "summary_arg")
		delete(additionalProperties, "summary_arg_count")
		delete(additionalProperties, "email_subject")
		delete(additionalProperties, "email_body")
		delete(additionalProperties, "email_from_name")
		delete(additionalProperties, "email_from_address")
		delete(additionalProperties, "sms_from")
		delete(additionalProperties, "sms_media_urls")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNotification struct {
	value *Notification
	isSet bool
}

func (v NullableNotification) Get() *Notification {
	return v.value
}

func (v *NullableNotification) Set(val *Notification) {
	v.value = val
	v.isSet = true
}

func (v NullableNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotification(val *Notification) *NullableNotification {
	return &NullableNotification{value: val, isSet: true}
}

func (v NullableNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


