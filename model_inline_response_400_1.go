/*
OneSignal

A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com

API version: 1.0.1
Contact: devrel@onesignal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onesignal

import (
	"encoding/json"
)

// InlineResponse4001 struct for InlineResponse4001
type InlineResponse4001 struct {
	Success *string `json:"success,omitempty"`
	Errors []string `json:"errors,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InlineResponse4001 InlineResponse4001

// NewInlineResponse4001 instantiates a new InlineResponse4001 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse4001() *InlineResponse4001 {
	this := InlineResponse4001{}
	return &this
}

// NewInlineResponse4001WithDefaults instantiates a new InlineResponse4001 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse4001WithDefaults() *InlineResponse4001 {
	this := InlineResponse4001{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *InlineResponse4001) GetSuccess() string {
	if o == nil || o.Success == nil {
		var ret string
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse4001) GetSuccessOk() (*string, bool) {
	if o == nil || o.Success == nil {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *InlineResponse4001) HasSuccess() bool {
	if o != nil && o.Success != nil {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given string and assigns it to the Success field.
func (o *InlineResponse4001) SetSuccess(v string) {
	o.Success = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *InlineResponse4001) GetErrors() []string {
	if o == nil || o.Errors == nil {
		var ret []string
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse4001) GetErrorsOk() ([]string, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *InlineResponse4001) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []string and assigns it to the Errors field.
func (o *InlineResponse4001) SetErrors(v []string) {
	o.Errors = v
}

func (o InlineResponse4001) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Success != nil {
		toSerialize["success"] = o.Success
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *InlineResponse4001) UnmarshalJSON(bytes []byte) (err error) {
	varInlineResponse4001 := _InlineResponse4001{}

	if err = json.Unmarshal(bytes, &varInlineResponse4001); err == nil {
		*o = InlineResponse4001(varInlineResponse4001)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "success")
		delete(additionalProperties, "errors")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInlineResponse4001 struct {
	value *InlineResponse4001
	isSet bool
}

func (v NullableInlineResponse4001) Get() *InlineResponse4001 {
	return v.value
}

func (v *NullableInlineResponse4001) Set(val *InlineResponse4001) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse4001) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse4001) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse4001(val *InlineResponse4001) *NullableInlineResponse4001 {
	return &NullableInlineResponse4001{value: val, isSet: true}
}

func (v NullableInlineResponse4001) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse4001) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


