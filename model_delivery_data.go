/*
OneSignal

A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com

API version: 1.0.2
Contact: devrel@onesignal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DeliveryData struct for DeliveryData
type DeliveryData struct {
	Successful *int32 `json:"successful,omitempty"`
	Failed *int32 `json:"failed,omitempty"`
	Errored *int32 `json:"errored,omitempty"`
	Converted *int32 `json:"converted,omitempty"`
	Received *int32 `json:"received,omitempty"`
}

// NewDeliveryData instantiates a new DeliveryData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeliveryData() *DeliveryData {
	this := DeliveryData{}
	return &this
}

// NewDeliveryDataWithDefaults instantiates a new DeliveryData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeliveryDataWithDefaults() *DeliveryData {
	this := DeliveryData{}
	return &this
}

// GetSuccessful returns the Successful field value if set, zero value otherwise.
func (o *DeliveryData) GetSuccessful() int32 {
	if o == nil || o.Successful == nil {
		var ret int32
		return ret
	}
	return *o.Successful
}

// GetSuccessfulOk returns a tuple with the Successful field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeliveryData) GetSuccessfulOk() (*int32, bool) {
	if o == nil || o.Successful == nil {
		return nil, false
	}
	return o.Successful, true
}

// HasSuccessful returns a boolean if a field has been set.
func (o *DeliveryData) HasSuccessful() bool {
	if o != nil && o.Successful != nil {
		return true
	}

	return false
}

// SetSuccessful gets a reference to the given int32 and assigns it to the Successful field.
func (o *DeliveryData) SetSuccessful(v int32) {
	o.Successful = &v
}

// GetFailed returns the Failed field value if set, zero value otherwise.
func (o *DeliveryData) GetFailed() int32 {
	if o == nil || o.Failed == nil {
		var ret int32
		return ret
	}
	return *o.Failed
}

// GetFailedOk returns a tuple with the Failed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeliveryData) GetFailedOk() (*int32, bool) {
	if o == nil || o.Failed == nil {
		return nil, false
	}
	return o.Failed, true
}

// HasFailed returns a boolean if a field has been set.
func (o *DeliveryData) HasFailed() bool {
	if o != nil && o.Failed != nil {
		return true
	}

	return false
}

// SetFailed gets a reference to the given int32 and assigns it to the Failed field.
func (o *DeliveryData) SetFailed(v int32) {
	o.Failed = &v
}

// GetErrored returns the Errored field value if set, zero value otherwise.
func (o *DeliveryData) GetErrored() int32 {
	if o == nil || o.Errored == nil {
		var ret int32
		return ret
	}
	return *o.Errored
}

// GetErroredOk returns a tuple with the Errored field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeliveryData) GetErroredOk() (*int32, bool) {
	if o == nil || o.Errored == nil {
		return nil, false
	}
	return o.Errored, true
}

// HasErrored returns a boolean if a field has been set.
func (o *DeliveryData) HasErrored() bool {
	if o != nil && o.Errored != nil {
		return true
	}

	return false
}

// SetErrored gets a reference to the given int32 and assigns it to the Errored field.
func (o *DeliveryData) SetErrored(v int32) {
	o.Errored = &v
}

// GetConverted returns the Converted field value if set, zero value otherwise.
func (o *DeliveryData) GetConverted() int32 {
	if o == nil || o.Converted == nil {
		var ret int32
		return ret
	}
	return *o.Converted
}

// GetConvertedOk returns a tuple with the Converted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeliveryData) GetConvertedOk() (*int32, bool) {
	if o == nil || o.Converted == nil {
		return nil, false
	}
	return o.Converted, true
}

// HasConverted returns a boolean if a field has been set.
func (o *DeliveryData) HasConverted() bool {
	if o != nil && o.Converted != nil {
		return true
	}

	return false
}

// SetConverted gets a reference to the given int32 and assigns it to the Converted field.
func (o *DeliveryData) SetConverted(v int32) {
	o.Converted = &v
}

// GetReceived returns the Received field value if set, zero value otherwise.
func (o *DeliveryData) GetReceived() int32 {
	if o == nil || o.Received == nil {
		var ret int32
		return ret
	}
	return *o.Received
}

// GetReceivedOk returns a tuple with the Received field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeliveryData) GetReceivedOk() (*int32, bool) {
	if o == nil || o.Received == nil {
		return nil, false
	}
	return o.Received, true
}

// HasReceived returns a boolean if a field has been set.
func (o *DeliveryData) HasReceived() bool {
	if o != nil && o.Received != nil {
		return true
	}

	return false
}

// SetReceived gets a reference to the given int32 and assigns it to the Received field.
func (o *DeliveryData) SetReceived(v int32) {
	o.Received = &v
}

func (o DeliveryData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Successful != nil {
		toSerialize["successful"] = o.Successful
	}
	if o.Failed != nil {
		toSerialize["failed"] = o.Failed
	}
	if o.Errored != nil {
		toSerialize["errored"] = o.Errored
	}
	if o.Converted != nil {
		toSerialize["converted"] = o.Converted
	}
	if o.Received != nil {
		toSerialize["received"] = o.Received
	}
	return json.Marshal(toSerialize)
}

type NullableDeliveryData struct {
	value *DeliveryData
	isSet bool
}

func (v NullableDeliveryData) Get() *DeliveryData {
	return v.value
}

func (v *NullableDeliveryData) Set(val *DeliveryData) {
	v.value = val
	v.isSet = true
}

func (v NullableDeliveryData) IsSet() bool {
	return v.isSet
}

func (v *NullableDeliveryData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeliveryData(val *DeliveryData) *NullableDeliveryData {
	return &NullableDeliveryData{value: val, isSet: true}
}

func (v NullableDeliveryData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeliveryData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


